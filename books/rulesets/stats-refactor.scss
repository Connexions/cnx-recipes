//Import order doesn't affect output
@import "common-refactor/compose";
@import "common-refactor/count";
@import "common-refactor/link";
@import "common-refactor/number";
@import "common-refactor/reference";

//Do we want the book level to import utils?
@import "common-refactor/utils";

//General stuff that we don't know if we need?
@import "common-refactor/stuff";


//TODO: Improve performance by using more specific selectors in libraries when possible

//Different language mock-up
$lang: "en";
$chapter_en: "Chapter";
$appendix_en: "Appendix";
$chapter_de: "Kapitel";
$appendix_de: "Anhang";

//Usage: ("[name]","[source section]", [?section-separated], [?has-solutions])
//Still need: ?solutions, actual name of section (e.g. "Key Terms")
//Handle document-titles and metadata with this info

//currently solutions will create an empty bucket because it is only used later?
//perhaps add another property to allow nothing to be moved? but still create container?

//translate pages into map variables rather than lists for readability

//Base object
$compositePage_obj: (
  name: null,
  nameClass: null,
  source: null,
  isSeparated: false,
  hasSolutions: false,
  isGlossary: false,
  sortBy: null
);

//Inherit compositePage object
@function compositePage($params) {
  @return map-merge($compositePage_obj, $params);
}

$pageKeyTerms: compositePage((
  name: "Key Terms",
  nameClass: "text",
  source: "glossary",
  isGlossary: true,
  sortBy: "dl > dt"
));

$pageChapterReview: compositePage((
  name: "Chapter Review",
  nameClass: "text",
  source: "summary",
  isSeparated: true
));

$pageFormulaReview: compositePage((
  name: "Formula Review",
  nameClass: "text",
  source: "formula-review",
  isSeparated: true
));

$pagePractice: compositePage((
  name: "Practice",
  nameClass: "text",
  source: "practice",
  isSeparated: true,
  hasSolutions: true
));

$pageBITExercises: compositePage((
  name: "Bringing It Together: Exercises",
  nameClass: "text",
  source: "bring-together-exercises",
  hasSolutions: true
));

$pageHomework: compositePage((
  name: "Homework",
  nameClass: "text",
  source: "free-response",
  isSeparated: true,
  hasSolutions: true
));

$pageBITHomework: compositePage((
  name: "Bringing It Together: Homework",
  nameClass: "text",
  source: "bring-together-homework",
  hasSolutions: true
));

$pageReferences: compositePage((
  name: "References",
  nameClass: "text",
  source: "references",
  isSeparated: true
));

$pageSolutions: compositePage((
  name: "Solutions",
  nameClass: "text",
));

$chapterCompositePages: (
  $pageKeyTerms,
  $pageChapterReview,
  $pageFormulaReview,
  $pagePractice,
  $pageBITExercises,
  $pageHomework,
  $pageBITHomework,
  $pageReferences,
  $pageSolutions
);

//make content maps, with
$chapterTitleContent: (
  number: counter(chapter),
  label: "Chapter",
  divider: "|"
);

$appendixTitleContent: (
  label: "Appendix",
  number: counter(appendix, upper-alpha),
  divider: ":"
);

$sectionTitleContent: (
  number: counter(chapter)"."counter(section),
  divider: "|"
);

$exerciseTitleContent: (
  number: counter(exercise)
);

$exampleTitleContent: (
  label: "Example",
  number: counter(chapter)"."counter(example)
);

$exampleSolutionTitleContent: (
  label: "Solution",
  number: counter(chapter)"."counter(example)
);

//New pass system
:pass(0) {
  @include titlePreface();
  //Come up with mixins for common numbering schemes as per Phil's suggestion
  @include countChapters(chapter);
  @include numberChapters($chapterTitleContent);
  @include countAppendices(appendix);
  @include numberAppendices($appendixTitleContent);
  @include countSections(section);
  @include numberSections($sectionTitleContent);
  @include refSectionTitleNodeAs(sectionTitleNode);
  @include createChapterComposites($chapterCompositePages, sectionTitleNode);
  @include countExamples(example);
  @include numberExamples($exampleTitleContent, $exampleSolutionTitleContent);
}
:pass(1) {
  @include countEOCExercises(exercise);
  @include numberEOCExercises($exerciseTitleContent, $exerciseTitleContent);
}
:pass(2) {
  @include countEOCExercises(exercise);
  @include linkToProblemsFromSolutionsEOC("number", "number", exercise);
}
:pass(3) {
  @include prepEOCSolutions($chapterCompositePages, bSolutions);
  @include putSolutionsEOC(bSolutions, "solutions");
}
:pass(4) {
  @include countTables(table);
  @include numberTables();
}
:pass(100) {
  @include clearTrash();
}