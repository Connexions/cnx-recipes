/*==========================================================
  STATISTICS PAGES
==========================================================*/
/*==========================================================
  STATISTICS TITLING CONTENT
==========================================================*/
/*==========================================================
  STATISTICS CONFIG
==========================================================*/
:pass(0) div.preface > [data-type="document-title"] {
  container: h1;
<<<<<<< HEAD
  content: content(); }
:pass(0) :not([data-type="metadata"]) > [data-type="document-title"] {
  content: ''; }
  :pass(0) :not([data-type="metadata"]) > [data-type="document-title"]::after {
    content: content();
    container: span;
    class: "text"; }
:pass(0) a[href*="archive.cnx.org/specials/"] {
  attr-target: "_blank"; }
:pass(0) .try [data-type="solution"] {
  move-to: trash; }

:pass(1) body {
  counter-reset: chapter; }
:pass(1) div[data-type="chapter"] {
  counter-increment: chapter; }
:pass(1) div[data-type="chapter"]::before {
  container: span;
=======
  content: content();
}
body div.appendix {
  counter-increment: appendix;
}
body div.appendix::before {
  container: span;
  class: "toc-label";
  content: "Appendix";
  move-to: appendixLabel;
}
body div.appendix::before {
  container: span;
  class: "number";
  content: counter(appendix, upper-alpha);
  move-to: appendixNumber;
}
body div.appendix::before {
  content: ": ";
  container: span;
  class: "divider";
  move-to: appendixDivider;
}
body div.appendix > div[data-type="document-title"] {
  container: h1;
  content: pending(appendixLabel) " " pending(appendixNumber) pending(appendixDivider) content();
}
body div[data-type="chapter"]:pass(20) {
  counter-reset: exercises;
}
body div[data-type="chapter"] {
  counter-reset: section;
  counter-reset: example;
  counter-reset: lab;
  counter-increment: chapter;
}
body div[data-type="chapter"]::before {
  container: span;
  class: "number";
>>>>>>> correct pass syntax for mixins; update css
  content: counter(chapter);
  class: number;
  move-to: bChapterLabel; }
:pass(1) div[data-type="chapter"]::before {
  container: span;
  content: " | ";
  class: divider;
  move-to: bChapterLabel; }
:pass(1) div[data-type="chapter"] > [data-type="document-title"] {
  container: h1;
  content: pending(bChapterLabel) content(); }
:pass(1) body {
  counter-reset: appendix; }
:pass(1) div.appendix {
  counter-increment: appendix; }
:pass(1) div.appendix::before {
  container: span;
  content: "Appendix ";
  class: title-label;
  move-to: bAppendixLabel; }
:pass(1) div.appendix::before {
  container: span;
  content: counter(appendix,upper-alpha);
  class: number;
  move-to: bAppendixLabel; }
:pass(1) div.appendix::before {
  container: span;
  content: " : ";
  class: divider;
  move-to: bAppendixLabel; }
:pass(1) div.appendix > [data-type="document-title"] {
  container: h1;
  content: pending(bAppendixLabel) content(); }
:pass(1) [data-type="chapter"], :pass(1) .appendix {
  counter-reset: section; }
:pass(1) div[data-type="chapter"] > div[data-type="page"]:not(.introduction) {
  counter-increment: section; }
:pass(1) div[data-type="chapter"] > div[data-type="page"]:not(.introduction)::before {
  container: span;
  content: counter(chapter) "." counter(section);
  class: number;
  move-to: bSectionLabel; }
:pass(1) div[data-type="chapter"] > div[data-type="page"]:not(.introduction)::before {
  container: span;
  content: " | ";
  class: divider;
  move-to: bSectionLabel; }
:pass(1) div[data-type="chapter"] > div[data-type="page"]:not(.introduction) > [data-type="document-title"] {
  container: h2;
<<<<<<< HEAD
  content: pending(bSectionLabel) content(); }
:pass(1) div[data-type="chapter"] > div[data-type="page"].introduction > [data-type="document-title"] {
  container: h2; }
:pass(1) [data-type="chapter"], :pass(1) .appendix {
  counter-reset: example; }
:pass(1) div[data-type="chapter"] [data-type="example"] {
  counter-increment: example; }
:pass(1) .example::before {
  container: span;
  content: "Example ";
  class: title-label;
  move-to: bExampleLabel; }
:pass(1) .example::before {
  container: span;
  content: counter(chapter) "." counter(example);
  class: number;
  move-to: bExampleLabel; }
:pass(1) .example > [data-type="title"] {
  move-to: trash; }
  :pass(1) .example > [data-type="title"]::before {
    container: span;
    content: content();
    class: text;
    move-to: bExampleLabel; }
:pass(1) .example::after {
  container: div;
  content: pending(bExampleLabel);
  class: "title";
  move-to: bExampleHeader; }
:pass(1) .example:deferred {
  content: pending(bExampleHeader) content(); }
:pass(1) .example [data-type="solution"]::before {
  container: span;
  content: "Solution ";
  class: title-label;
  move-to: -TITLECONTAINER; }
:pass(1) .example [data-type="solution"]::before {
  container: span;
  content: counter(chapter) "." counter(example);
  class: number;
  move-to: -TITLECONTAINER; }
:pass(1) .example [data-type="solution"]::before {
  container: div;
  data-type: "solution-title";
  content: pending(-TITLECONTAINER); }
:pass(1) [data-type="chapter"], :pass(1) .appendix {
  counter-reset: Try; }
:pass(1) [data-type="note"].try {
  counter-increment: Try; }
:pass(1) [data-type="note"].try::before {
  container: span;
  content: "Try It ";
  class: title-label;
  move-to: bNoteLabel-try; }
:pass(1) [data-type="note"].try::before {
  container: span;
  content: counter(chapter) "." counter(example);
  class: number;
  move-to: bNoteLabel-try; }
:pass(1) [data-type="note"].try > [data-type="title"] {
  move-to: trash; }
:pass(1) [data-type="note"].try::after {
  container: div;
  content: pending(bNoteLabel-try);
  class: "title";
  move-to: bNoteHeader; }
:pass(1) [data-type="note"].try:deferred {
  content: pending(bNoteHeader) content(); }
:pass(1) [data-type="note"].calculator::before {
  container: span;
  content: "Using the TI-83, 83+, 84, 84+ Calculator";
  class: title-label;
  move-to: bNoteLabel-calculator; }
:pass(1) [data-type="note"].calculator > [data-type="title"] {
  move-to: trash; }
:pass(1) [data-type="note"].calculator::after {
  container: div;
  content: pending(bNoteLabel-calculator);
  class: "title";
  move-to: bNoteHeader; }
:pass(1) [data-type="note"].calculator:deferred {
  content: pending(bNoteHeader) content(); }
:pass(1) body {
  counter-reset: term; }
:pass(1) div[data-type="page"] span[data-type="term"], :pass(1) div[data-type="composite-page"] span[data-type="term"] {
  counter-increment: term; }
:pass(1) div[data-type="page"],
:pass(1) div[data-type="composite-page"] {
  string-set: pageID attr(id); }
:pass(1) div[data-type="page"] span[data-type="term"],
:pass(1) div[data-type="composite-page"] span[data-type="term"] {
  attr-id: "auto_" string(pageID) "_term" counter(term); }
  :pass(1) div[data-type="page"] span[data-type="term"]:match("^[a-zA-Z]"),
  :pass(1) div[data-type="composite-page"] span[data-type="term"]:match("^[a-zA-Z]") {
    attr-group-by: first-letter(content()); }
  :pass(1) div[data-type="page"] span[data-type="term"]:match("^[^a-zA-Z]"),
  :pass(1) div[data-type="composite-page"] span[data-type="term"]:match("^[^a-zA-Z]") {
    attr-group-by: ""; }
:pass(1) div[data-type="page"] > [data-type="document-title"],
:pass(1) div[data-type="composite-page"] > [data-type="document-title"] {
  node-set: sectionHeaderNode; }
:pass(1) div[data-type="chapter"] div[data-type="glossary"] > h3[data-type="glossary-title"] {
  move-to: trash; }
:pass(1) div[data-type="chapter"] div[data-type="glossary"] dl {
  move-to: glossary-TOCOMPOSITE; }
  :pass(1) div[data-type="chapter"] div[data-type="glossary"] dl > h3[data-type="title"] {
    move-to: trash; }
:pass(1) div[data-type="chapter"]::after {
  container: div;
  content: pending(glossary-TOCOMPOSITE);
  class: "eoc glossary-container";
  data-type: "composite-page";
  sort-by: dl > dt, nocase; }
:pass(1) div[data-type="chapter"] section.summary {
  content: nodes(sectionHeaderNode) content();
  move-to: summary-TOCOMPOSITE; }
  :pass(1) div[data-type="chapter"] section.summary > h3[data-type="title"] {
    move-to: trash; }
:pass(1) div[data-type="chapter"]::after {
  container: div;
  content: pending(summary-TOCOMPOSITE);
  class: "eoc summary-container";
  data-type: "composite-page"; }
:pass(1) div[data-type="chapter"] section.self-check-questions {
  move-to: self-check-questions-TOCOMPOSITE; }
  :pass(1) div[data-type="chapter"] section.self-check-questions > h3[data-type="title"] {
    move-to: trash; }
:pass(1) div[data-type="chapter"]::after {
  container: div;
  content: pending(self-check-questions-TOCOMPOSITE);
  class: "eoc self-check-questions-container";
  data-type: "composite-page"; }
:pass(1) div[data-type="chapter"] section.review-questions {
  move-to: review-questions-TOCOMPOSITE; }
  :pass(1) div[data-type="chapter"] section.review-questions > h3[data-type="title"] {
    move-to: trash; }
:pass(1) div[data-type="chapter"]::after {
  container: div;
  content: pending(review-questions-TOCOMPOSITE);
  class: "eoc review-questions-container";
  data-type: "composite-page"; }
:pass(1) div[data-type="chapter"] section.critical-thinking {
  move-to: critical-thinking-TOCOMPOSITE; }
  :pass(1) div[data-type="chapter"] section.critical-thinking > h3[data-type="title"] {
    move-to: trash; }
:pass(1) div[data-type="chapter"]::after {
  container: div;
  content: pending(critical-thinking-TOCOMPOSITE);
  class: "eoc critical-thinking-container";
  data-type: "composite-page"; }
:pass(1) div[data-type="chapter"] section.problems {
  move-to: problems-TOCOMPOSITE; }
  :pass(1) div[data-type="chapter"] section.problems > h3[data-type="title"] {
    move-to: trash; }
:pass(1) div[data-type="chapter"]::after {
  container: div;
  content: pending(problems-TOCOMPOSITE);
  class: "eoc problems-container";
  data-type: "composite-page"; }

:pass(2) div[data-type="page"] > [data-type="document-title"],
:pass(2) div[data-type="composite-page"] > [data-type="document-title"] {
  node-set: sectionHeaderNode; }
:pass(2) div[data-type="page"] > [data-type="document-title"],
:pass(2) div[data-type="composite-page"] > [data-type="document-title"] {
  string-set: sectionHeaderString content(); }
:pass(2) [data-type="chapter"] section.references {
  content: nodes(sectionHeaderNode) content();
  move-to: references-TOCOMPOSITE; }
  :pass(2) [data-type="chapter"] section.references > h3[data-type="title"] {
    move-to: trash; }
:pass(2) div[data-type="page"] span[data-type="term"]::after, :pass(2) div[data-type="composite-page"] span[data-type="term"]::after {
  content: content();
  attr-group-by: attr(group-by);
  container: span;
  class: "term";
  move-to: index-term; }
:pass(2) div[data-type="page"] span[data-type="term"]::after, :pass(2) div[data-type="composite-page"] span[data-type="term"]::after {
  content: string(sectionHeaderString);
  container: span;
  class: "term-section";
  move-to: index-section; }
:pass(2) div[data-type="page"] span[data-type="term"]::after, :pass(2) div[data-type="composite-page"] span[data-type="term"]::after {
=======
  content: pending(sectionNumber) " " pending(sectionDivider) content();
}
body div[data-type="chapter"] [data-type="page"] .example {
  counter-increment: example;
}
body div[data-type="chapter"] [data-type="page"] .example::before {
  content: counter(chapter) "." counter(example);
  container: span;
  class: "number";
  move-to: exampleNumber;
}
body div[data-type="chapter"] [data-type="page"] .example > [data-type='title'] {
  move-to: trash;
}
body div[data-type="chapter"] [data-type="page"] .example > [data-type='title']::before {
  content: content();
  container: span;
  class: "text";
  move-to: exampleTitle;
}
body div[data-type="chapter"] [data-type="page"] .example::after {
  class: "title";
  data-type: title;
  container: div;
  content: "Example " pending(exampleNumber) pending(exampleTitle);
  move-to: exampleTitleHeader;
}
body div[data-type="chapter"] [data-type="page"] .example:deferred {
  content: pending(exampleTitleHeader) content();
}
body div[data-type="chapter"] [data-type="page"] .example [data-type="solution"]::before {
  container: div;
  data-type: title;
  content: "Solution " counter(chapter) "." counter(example);
}
body div[data-type="chapter"] [data-type="page"] .try .exercise::before {
  class: "try-number";
  container: span;
  class: "number";
  content: counter(chapter) "." counter(example);
}
body div[data-type="chapter"] [data-type="page"] .lab {
  counter-increment: lab;
}
body div[data-type="chapter"] [data-type="page"] .lab::before {
  content: "Stats Lab";
  class: "stat-lab-title";
  data-type: "title";
}
body div[data-type="chapter"] [data-type="page"] .lab > [data-type="title"]::before {
  content: counter(chapter) "." counter(lab);
  container: span;
  class: "lab-number";
  node-set: labNumber;
}
body div[data-type="chapter"]:pass(40) {
  counter-reset: section;
  counter-reset: example;
  counter-reset: lab;
  counter-increment: chapter;
}
body div[data-type="chapter"]:pass(40) [data-type="page"] .example {
  counter-increment: example;
  string-set: target-label "Example " counter(chapter) "." counter(example);
}
body div[data-type="chapter"]:pass(40) [data-type="page"] .try {
  string-set: target-label "Try It";
}
body [data-type="chapter"]:pass(40) {
  counter-reset: figure;
  counter-reset: table;
  counter-increment: chapNum;
  counter-reset: exercises-target;
}
body [data-type="chapter"]:pass(40) [data-target="figure"] {
  content: "Fig." target-counter(attr(href), chapNum) "." target-counter(attr(href), figure);
}
body [data-type="chapter"]:pass(40) [data-target="table"] {
  content: "Table" target-counter(attr(href), chapNum) "." target-counter(attr(href), figure);
}
body [data-type="chapter"]:pass(40) :not(figure) > figure {
  counter-increment: figure;
  string-set: target-label "Figure " counter(chapNum) "." counter(figure);
}
body [data-type="chapter"]:pass(40) :not(figure) > figure figcaption {
  container: span;
  class: caption;
  content: content();
  move-to: figCaption;
}
body [data-type="chapter"]:pass(40) :not(figure) > figure::after {
  container: span;
  content: string(target-label);
  move-to: figureNumber;
}
body [data-type="chapter"]:pass(40) :not(figure) > figure::after {
  class: "number";
  container: span ;
  content: pending(figureNumber);
  move-to: figNum;
}
body [data-type="chapter"]:pass(40) :not(figure) > figure::after {
  class: "caption-container";
  content: pending(figNum) pending(figCaption);
  move-to: captionContainer;
}
body [data-type="chapter"]:pass(40) :not(figure) > figure::outside {
  class: figure;
  container: div;
  content: pending(captionContainer);
}
body [data-type="chapter"]:pass(40) :not(table) > table {
  counter-increment: table;
  string-set: target-label "Table " counter(chapNum) "." counter(table);
}
body [data-type="chapter"]:pass(40) :not(table) > table caption {
  container: span;
  class: caption;
  move-to: imageCaption;
}
body [data-type="chapter"]:pass(40) :not(table) > table caption [data-type="title"] {
  container: span;
  class: "title";
  move-to: captionTitle;
}
body [data-type="chapter"]:pass(40) :not(table) > table::after {
  container: span;
  content: string(target-label);
  move-to: tableNumber;
}
body [data-type="chapter"]:pass(40) :not(table) > table:after {
  container: span;
  class: "number";
  content: pending(tableNumber);
  move-to: table-number;
}
body [data-type="chapter"]:pass(40) :not(table) > table::after {
  class: "caption-container";
  content: pending(table-number) pending(captionTitle) pending(imageCaption);
  move-to: captionContainer;
}
body [data-type="chapter"]:pass(40) :not(table) > table::outside {
  class: table;
  container: div;
  content: pending(captionContainer);
}
body .appendix:pass(40) {
  counter-reset: figure;
  counter-reset: table;
  counter-increment: apNum;
}
body .appendix:pass(40) :not(figure) > figure {
  counter-increment: figure;
  string-set: target-label "Figure " counter(apNum, upper-alpha) counter(figure);
}
body .appendix:pass(40) :not(figure) > figure figcaption {
  container: span;
  class: caption;
  content: content();
  move-to: figCaption;
}
body .appendix:pass(40) :not(figure) > figure::after {
  container: span;
  content: string(target-label);
  move-to: figureNumber;
}
body .appendix:pass(40) :not(figure) > figure::after {
  class: "number";
  container: span ;
  content: pending(figureNumber);
  move-to: figNum;
}
body .appendix:pass(40) :not(figure) > figure::after {
  class: "caption-container";
  content: pending(figNum) pending(figCaption);
  move-to: captionContainer;
}
body .appendix:pass(40) :not(figure) > figure::outside {
  class: figure;
  container: div;
  content: pending(captionContainer);
}
body .appendix:pass(40) :not(table) > table {
  counter-increment: table;
  string-set: target-label "Table " counter(apNum, upper-alpha) counter(table);
}
body .appendix:pass(40) :not(table) > table caption {
  container: span;
  class: caption;
  move-to: imageCaption;
}
body .appendix:pass(40) :not(table) > table caption [data-type="title"] {
  container: span;
  class: "title";
  move-to: captionTitle;
}
body .appendix:pass(40) :not(table) > table::after {
  container: span;
  content: string(target-label);
  move-to: tableNumber;
}
body .appendix:pass(40) :not(table) > table:after {
  container: span;
  class: "number";
  content: pending(tableNumber);
  move-to: table-number;
}
body .appendix:pass(40) :not(table) > table::after {
  class: "caption-container";
  content: pending(table-number) pending(captionTitle) pending(imageCaption);
  move-to: captionContainer;
}
body .appendix:pass(40) :not(table) > table::outside {
  class: table;
  container: div;
  content: pending(captionContainer);
}
body .eoc:pass(40) [data-type="exercise"] {
  counter-increment: exercises-target;
  string-set: target-label "Exercise " counter(chapter) "." counter(exercises-target);
}
body .eoc:pass(20) [data-type="exercise"] [data-type="problem"] {
  counter-increment: exercises;
  string-set: exId attr(id);
}
body .eoc:pass(20) [data-type="exercise"] [data-type="problem"]::before {
  container: span;
  content: counter(exercises) ".";
  node-set: exerciseNumber;
}
body .eoc:pass(20) [data-type="solution"]::before {
  container: a;
  attr-href: "#" string(exId);
  content: nodes(exerciseNumber);
}
body a.autogenerated-content:pass(40) {
  content: target-string(attr(href), target-label);
}
/* This file includes parts that are used only once per book */
body {
  counter-reset: term-count;
}
a[href*="archive.cnx.org/specials/"] {
  attr-target: "_blank";
}
div[data-type='chapter'] > [data-type="document-title"] {
  node-set: chapterTitle;
}
div[data-type='chapter'] > [data-type="document-title"] .number:pass(25) {
  node-set: nodeChapterNumber;
}
div[data-type='chapter'] > [data-type="document-title"] .toc-label:pass(25) {
  node-set: nodeChapterLabel;
}
div[data-type='chapter'] > [data-type="document-title"] .text:pass(35) {
  node-set: nodeChapterText;
}
div[data-type='chapter'] div[data-type="page"],
div[data-type='chapter'] div[data-type="composite-page"] {
  string-set: page-id attr(id);
}
div[data-type='chapter'] div[data-type="page"] > h2[data-type="document-title"],
div[data-type='chapter'] div[data-type="composite-page"] > h2[data-type="document-title"] {
  string-set: section-title content();
  node-set: sectionTitle;
}
div[data-type='chapter'] div[data-type="page"] span[data-type="term"],
div[data-type='chapter'] div[data-type="composite-page"] span[data-type="term"] {
  counter-increment: term-count;
  attr-id: "auto_" string(page-id) "_term" counter(term-count);
}
div[data-type='chapter'] div[data-type="page"] span[data-type="term"]:match(^[a-zA-Z]),
div[data-type='chapter'] div[data-type="composite-page"] span[data-type="term"]:match(^[a-zA-Z]) {
  attr-group-by: first-letter(content());
}
div[data-type='chapter'] div[data-type="page"] span[data-type="term"]:match(^[^a-zA-Z]),
div[data-type='chapter'] div[data-type="composite-page"] span[data-type="term"]:match(^[^a-zA-Z]) {
  attr-group-by: "";
}
div[data-type='chapter'] div[data-type="page"]:pass(50),
div[data-type='chapter'] div[data-type="composite-page"]:pass(50) {
  string-set: page-id attr(id);
}
div[data-type='chapter'] div[data-type="page"]:pass(50) > h2[data-type="document-title"],
div[data-type='chapter'] div[data-type="composite-page"]:pass(50) > h2[data-type="document-title"] {
  string-set: section-title content();
  node-set: sectionTitle;
}
div[data-type='chapter'] div[data-type="page"]:pass(50) span[data-type="term"]::after,
div[data-type='chapter'] div[data-type="composite-page"]:pass(50) span[data-type="term"]::after {
  content: content();
  attr-group-by: attr(group-by);
  container: span;
  class: glossary-term;
  move-to: index-term;
}
div[data-type='chapter'] div[data-type="page"]:pass(50) span[data-type="term"]::after,
div[data-type='chapter'] div[data-type="composite-page"]:pass(50) span[data-type="term"]::after {
  content: string(section-title);
>>>>>>> correct pass syntax for mixins; update css
  container: a;
  content: pending(index-section);
  attr-href: "#" attr(id);
<<<<<<< HEAD
  class: "term-section-link";
  move-to: index-section-link; }
:pass(2) div[data-type="page"] span[data-type="term"]::after, :pass(2) div[data-type="composite-page"] span[data-type="term"]::after {
  content: pending(index-term) pending(index-section-link);
  class: index-item;
  move-to: index-TOCOMPOSITE; }
:pass(2) [data-type="chapter"], :pass(2) .appendix {
  counter-reset: exercise; }
:pass(2) .eoc [data-type="exercise"] {
  counter-increment: exercise; }
:pass(2) .eoc [data-type="exercise"] [data-type="problem"]::before {
  container: span;
  content: counter(exercise);
  class: number; }
:pass(2) .eoc [data-type="exercise"] [data-type="solution"]::before {
  container: span;
  content: counter(exercise);
  class: number; }

:pass(3) body {
  counter-reset: exerciseAll; }
:pass(3) .eoc [data-type="exercise"] {
  counter-increment: exerciseAll; }
:pass(3) .eoc [data-type=problem] .number {
  attr-id: "problem-" counter(exerciseAll);
  string-set: problem-ID "problem-" counter(exerciseAll); }
:pass(3) .eoc [data-type=solution] .number::outside {
  container: a;
  attr-href: "#" string(problem-ID); }
:pass(3) div[data-type="chapter"] {
  node-set: chapterHeaderNode; }
:pass(3) [data-type="chapter"] .solutions-chapter-area {
  content: nodes(chapterHeaderNode) content();
  move-to: solutions-TOCOMPOSITE; }
:pass(3) [data-type="chapter"] .references-chapter-area {
  content: nodes(chapterHeaderNode) content();
  move-to: references-TOCOMPOSITE; }
:pass(3) [data-type="chapter"] .index-chapter-area {
  content: nodes(chapterHeaderNode) content();
  move-to: index-TOCOMPOSITE; }

:pass(4) div[data-type="page"] > [data-type="document-title"],
:pass(4) div[data-type="composite-page"] > [data-type="document-title"] {
  node-set: sectionHeaderNode; }
:pass(4) [data-type="chapter"] .eoc.self-check-questions-container [data-type="solution"] {
  move-to: solutions-TOCOMPOSITE; }
:pass(4) [data-type="chapter"] .eoc.problems-container [data-type="solution"] {
  move-to: solutions-TOCOMPOSITE; }
:pass(4) body::after {
  container: div;
  content: pending(solutions-TOCOMPOSITE);
  class: "eob solutions-container";
  data-type: "composite-page"; }
:pass(4) body::after {
  container: div;
  content: pending(solutions-TOCOMPOSITE);
  class: "eob solutions-container";
  data-type: "composite-page"; }
:pass(4) body::after {
  container: div;
  content: pending(references-TOCOMPOSITE);
  class: "eob references-container";
  data-type: "composite-page"; }
:pass(4) body::after {
=======
  move-to: link;
}
div[data-type='chapter'] div[data-type="page"]:pass(50) span[data-type="term"]::after,
div[data-type='chapter'] div[data-type="composite-page"]:pass(50) span[data-type="term"]::after {
  content: pending(index-term) pending(link);
  class: index-item;
  move-to: eob-index;
}
body > [data-type="metadata"] {
  node-set: bookMetadata;
}
body div.eoc:pass(77) [data-type="cnx-archive-uri"],
body div.eob:pass(77) [data-type="cnx-archive-uri"] {
  move-to: trash;
}
body::before {
>>>>>>> correct pass syntax for mixins; update css
  container: div;
  content: pending(index-TOCOMPOSITE);
  class: "eob index-container";
  data-type: "composite-page";
  group-by: span, "span::attr(group-by)", nocase; }

:pass(5) .index-container > div.group-by:first-of-type > span.group-label {
  content: "Symbols"; }
:pass(5) body {
  counter-reset: chapter; }
:pass(5) div[data-type="chapter"] {
  counter-increment: chapter; }
:pass(5) body {
  counter-reset: appendix; }
:pass(5) div.appendix {
  counter-increment: appendix; }
:pass(5) [data-type="chapter"], :pass(5) .appendix {
  counter-reset: exercise; }
:pass(5) .eoc [data-type="exercise"] {
  counter-increment: exercise; }
:pass(5) [data-type="chapter"], :pass(5) .appendix {
  counter-reset: example; }
:pass(5) div[data-type="chapter"] [data-type="example"] {
  counter-increment: example; }
:pass(5) .eoc [data-type="exercise"] {
  string-set: target-label "Exercise " counter(chapter) "." counter(exercise); }
:pass(5) div[data-type="chapter"] .example {
  string-set: target-label "Example " counter(chapter) "." counter(example); }
:pass(5) div[data-type="chapter"] .try {
  string-set: target-label "Try It"; }
:pass(5) [data-type="chapter"] :not(table) > table {
  string-set: target-label "Table " counter(chapter) "." counter(table); }
:pass(5) [data-type="chapter"] :not(figure) > figure {
  string-set: target-label "Figure " counter(chapter) "." counter(figure); }
:pass(5) [data-type="appendix"] :not(table) > table {
  string-set: target-label "Table " counter(appendix,upper-alpha) "." counter(table); }
:pass(5) [data-type="appendix"] :not(figure) > figure {
  string-set: target-label "Table " counter(appendix,upper-alpha) "." counter(figure); }
:pass(5) a.autogenerated-content {
  content: target-string(attr(href), target-label); }
:pass(5) body > [data-type="metadata"] {
  node-set: bookMetadata; }
:pass(5) [data-type="composite-page"] {
  content: nodes(bookMetadata) content(); }
:pass(5) [data-type="composite-page"].eoc.glossary-container::before {
  container: span;
  content: "Key Terms";
  class: text;
  move-to: -TITLECONTAINER; }
:pass(5) [data-type="composite-page"].eoc.glossary-container::before {
  container: h1;
  data-type: "document-title";
  content: pending(-TITLECONTAINER); }
:pass(5) [data-type="composite-page"].eoc.summary-container::before {
  container: span;
  content: "Key Concepts and Summary";
  class: text;
  move-to: -TITLECONTAINER; }
:pass(5) [data-type="composite-page"].eoc.summary-container::before {
  container: h1;
  data-type: "document-title";
  content: pending(-TITLECONTAINER); }
:pass(5) [data-type="composite-page"].eoc.self-check-questions-container::before {
  container: span;
  content: "Self-Check Questions";
  class: text;
  move-to: -TITLECONTAINER; }
:pass(5) [data-type="composite-page"].eoc.self-check-questions-container::before {
  container: h1;
  data-type: "document-title";
  content: pending(-TITLECONTAINER); }
:pass(5) [data-type="composite-page"].eoc.review-questions-container::before {
  container: span;
  content: "Review Questions";
  class: text;
  move-to: -TITLECONTAINER; }
:pass(5) [data-type="composite-page"].eoc.review-questions-container::before {
  container: h1;
  data-type: "document-title";
  content: pending(-TITLECONTAINER); }
:pass(5) [data-type="composite-page"].eoc.critical-thinking-container::before {
  container: span;
  content: "Critical Thinking Questions";
  class: text;
  move-to: -TITLECONTAINER; }
:pass(5) [data-type="composite-page"].eoc.critical-thinking-container::before {
  container: h1;
  data-type: "document-title";
  content: pending(-TITLECONTAINER); }
:pass(5) [data-type="composite-page"].eoc.problems-container::before {
  container: span;
  content: "Problems";
  class: text;
  move-to: -TITLECONTAINER; }
:pass(5) [data-type="composite-page"].eoc.problems-container::before {
  container: h1;
  data-type: "document-title";
  content: pending(-TITLECONTAINER); }
:pass(5) [data-type="composite-page"].eob.solutions-container::before {
  container: span;
  content: "Answer Key";
<<<<<<< HEAD
  class: text;
  move-to: -TITLECONTAINER; }
:pass(5) [data-type="composite-page"].eob.solutions-container::before {
  container: h1;
  data-type: "document-title";
  content: pending(-TITLECONTAINER); }
:pass(5) [data-type="composite-page"].eob.references-container::before {
  container: span;
  content: "References";
  class: text;
  move-to: -TITLECONTAINER; }
:pass(5) [data-type="composite-page"].eob.references-container::before {
  container: h1;
  data-type: "document-title";
  content: pending(-TITLECONTAINER); }
:pass(5) [data-type="composite-page"].eob.index-container::before {
  container: span;
  content: "Index";
  class: text;
  move-to: -TITLECONTAINER; }
:pass(5) [data-type="composite-page"].eob.index-container::before {
  container: h1;
  data-type: "document-title";
  content: pending(-TITLECONTAINER); }
:pass(5) div[data-type="composite-page"] {
  attr-id: uuid() "@1"; }
:pass(5) div[data-type='chapter'] > h1[data-type='document-title'] {
  counter-increment: chapTitleNum;
  attr-id: "chapTitle" counter(chapTitleNum); }
:pass(5) [data-type="chapter"], :pass(5) .appendix {
  counter-reset: table; }
:pass(5) :not(table) > table {
  counter-increment: table; }
:pass(5) [data-type="chapter"], :pass(5) .appendix {
  counter-reset: figure; }
:pass(5) :not(figure) > figure {
  counter-increment: figure; }
:pass(5) [data-type="chapter"] :not(table) > table::before {
  container: span;
  content: "Table ";
  class: title-label;
  move-to: bCaption; }
:pass(5) [data-type="chapter"] :not(table) > table::before {
  container: span;
  content: counter(chapter) "." counter(table);
  class: number;
  move-to: bCaption; }
:pass(5) [data-type="chapter"] :not(table) > table caption [data-type="title"] {
  container: span;
  class: "title";
  move-to: bCaption; }
:pass(5) [data-type="chapter"] :not(table) > table::after {
  container: div;
  class: "caption-container";
  content: pending(bCaption);
  move-to: bCaptionContainer; }
:pass(5) [data-type="chapter"] :not(table) > table::outside {
  class: table;
  container: div;
  content: content() pending(bCaptionContainer); }
:pass(5) .appendix :not(table) > table::before {
  container: span;
  content: "Table ";
  class: title-label;
  move-to: bCaption; }
:pass(5) .appendix :not(table) > table::before {
  container: span;
  content: counter(appendix,upper-alpha) "." counter(table);
  class: number;
  move-to: bCaption; }
:pass(5) .appendix :not(table) > table caption [data-type="title"] {
  container: span;
  class: "title";
  move-to: bCaption; }
:pass(5) .appendix :not(table) > table::after {
  container: div;
  class: "caption-container";
  content: pending(bCaption);
  move-to: bCaptionContainer; }
:pass(5) .appendix :not(table) > table::outside {
  class: table;
  container: div;
  content: content() pending(bCaptionContainer); }
:pass(5) [data-type="chapter"] :not(figure) > figure::before {
  container: span;
  content: "Figure ";
  class: title-label;
  move-to: bCaption; }
:pass(5) [data-type="chapter"] :not(figure) > figure::before {
  container: span;
  content: counter(chapter) "." counter(figure);
  class: number;
  move-to: bCaption; }
:pass(5) [data-type="chapter"] :not(figure) > figure figcaption {
  container: span;
  class: "caption";
  move-to: bCaption; }
:pass(5) [data-type="chapter"] :not(figure) > figure::after {
  container: div;
  class: "caption-container";
  content: pending(bCaption);
  move-to: bCaptionContainer; }
:pass(5) [data-type="chapter"] :not(figure) > figure::outside {
  class: figure;
  container: div;
  content: content() pending(bCaptionContainer); }
:pass(5) .appendix :not(figure) > figure::before {
  container: span;
  content: "Figure ";
  class: title-label;
  move-to: bCaption; }
:pass(5) .appendix :not(figure) > figure::before {
  container: span;
  content: counter(appendix,upper-alpha) "." counter(figure);
  class: number;
  move-to: bCaption; }
:pass(5) .appendix :not(figure) > figure figcaption {
  container: span;
  class: "caption";
  move-to: bCaption; }
:pass(5) .appendix :not(figure) > figure::after {
  container: div;
  class: "caption-container";
  content: pending(bCaption);
  move-to: bCaptionContainer; }
:pass(5) .appendix :not(figure) > figure::outside {
  class: figure;
  container: div;
  content: content() pending(bCaptionContainer); }

:pass(6) [data-type="composite-page"] > [data-type="document-title"] {
  string-set: doc-title-TOMETADATA content(); }
:pass(6) [data-type="composite-page"] > [data-type="metadata"] > [data-type="document-title"] {
  content: string(doc-title-TOMETADATA); }

:pass(7) div.eoc [data-type="cnx-archive-uri"], :pass(7) div.eob [data-type="cnx-archive-uri"] {
  move-to: trash; }
:pass(7) body > div[data-type="page"],
:pass(7) body > div[data-type="composite-page"] {
  string-set: page-id attr(id); }
  :pass(7) body > div[data-type="page"] > [data-type='document-title'],
  :pass(7) body > div[data-type="composite-page"] > [data-type='document-title'] {
    node-set: pageTitle; }
  :pass(7) body > div[data-type="page"]::after,
  :pass(7) body > div[data-type="composite-page"]::after {
    content: nodes(pageTitle);
    attr-href: "#" string(page-id);
    container: a;
    move-to: page-link; }
  :pass(7) body > div[data-type="page"]::after,
  :pass(7) body > div[data-type="composite-page"]::after {
    content: pending(page-link);
    move-to: eob-toc;
    container: li; }
:pass(7) body > div[data-type='chapter'] > [data-type='document-title'] {
  node-set: chapterTitle;
  string-set: chapTitle-id attr(id); }
:pass(7) body > div[data-type='chapter']::after {
  content: nodes(chapterTitle);
  attr-href: "#" string(chapTitle-id);
  container: a;
  move-to: eoc-toc; }
:pass(7) body > div[data-type='chapter'] > div[data-type="page"],
:pass(7) body > div[data-type='chapter'] > div[data-type="composite-page"] {
  string-set: page-id-chap attr(id); }
  :pass(7) body > div[data-type='chapter'] > div[data-type="page"] > [data-type='document-title'],
  :pass(7) body > div[data-type='chapter'] > div[data-type="composite-page"] > [data-type='document-title'] {
    node-set: PageTitle; }
  :pass(7) body > div[data-type='chapter'] > div[data-type="page"]::after,
  :pass(7) body > div[data-type='chapter'] > div[data-type="composite-page"]::after {
    content: nodes(PageTitle);
    attr-href: "#" string(page-id-chap);
    container: a;
    move-to: page-link; }
  :pass(7) body > div[data-type='chapter'] > div[data-type="page"]::after,
  :pass(7) body > div[data-type='chapter'] > div[data-type="composite-page"]::after {
    content: pending(page-link);
    move-to: eoc-toc-pages;
    container: li; }
:pass(7) body > div[data-type='chapter']::after {
  content: pending(eoc-toc-pages);
  container: ol;
  class: chapter;
  move-to: eoc-toc; }
:pass(7) body > div[data-type='chapter']::after {
  content: pending(eoc-toc);
  container: li;
  move-to: eob-toc; }
:pass(7) body > div[data-type="unit"] > [data-type='document-title'] {
  copy-to: eou-toc; }
:pass(7) body > div[data-type="unit"] > div[data-type='chapter'] > [data-type='document-title'] {
  copy-to: eoc-toc; }
:pass(7) body > div[data-type="unit"] > div[data-type='chapter'] > div[data-type="page"] > [data-type='document-title'],
:pass(7) body > div[data-type="unit"] > div[data-type='chapter'] > div[data-type="composite-page"] > [data-type='document-title'] {
  copy-to: page-title; }
:pass(7) body > div[data-type="unit"] > div[data-type='chapter'] > div[data-type="page"]::after,
:pass(7) body > div[data-type="unit"] > div[data-type='chapter'] > div[data-type="composite-page"]::after {
  content: pending(page-title);
  move-to: eoc-toc-pages;
  container: li; }
:pass(7) body > div[data-type="unit"] > div[data-type='chapter']::after {
  content: pending(eoc-toc-pages);
  container: ol;
  class: chapter;
  move-to: eoc-toc; }
:pass(7) body > div[data-type="unit"] > div[data-type='chapter']::after {
  content: pending(eoc-toc);
  container: li;
  move-to: eou-toc-chapters; }
:pass(7) body > div[data-type="unit"]::after {
  content: pending(eou-toc-chapters);
  container: ol;
  class: unit;
  move-to: eou-toc; }
:pass(7) body > div[data-type="unit"]::after {
  content: pending(eou-toc);
  container: li;
  move-to: eob-toc; }

:pass(8) nav#toc {
  content: ''; }
  :pass(8) nav#toc::after {
    content: pending(eob-toc);
    container: ol; }

:pass(9) nav#toc li > a > h1 > span,
:pass(9) nav#toc li > a > h2 > span,
:pass(9) nav#toc li > a > div > span {
  move-to: title-spans; }
:pass(9) nav#toc li > a:deferred {
  content: pending(title-spans); }

:pass(100) body:deferred::after {
  content: clear(trash); }

/*# sourceMappingURL=economics.css.map */
=======
  data-type: document-title;
  move-to: answerTitle;
}
body .eob.index:pass(75) {
  content: nodes(bookMetadata) content();
}
body .eob.index [data-type="metadata"] [data-type="document-title"]:pass(76) {
  content: "Index";
}
body .eob.index:pass(52)::before {
  container: span;
  content: "Index";
  move-to: titleSpan;
}
body .eob.index:pass(52)::before {
  container: h1;
  data-type: document-title;
  content: pending(titleSpan);
}
body:pass(50)::after {
  class: "eob index";
  data-type: composite-page;
  content: pending(eob-index);
  group-by: span, "span::attr(group-by)", nocase;
}
body .eob.index > div.group-by:first-of-type > span.group-label:pass(51) {
  content: "Symbols";
}
body div[data-type="composite-page"]:pass(55) {
  attr-id: uuid() "@1";
}
body > div[data-type='chapter'] > h1[data-type='document-title']:pass(55) {
  counter-increment: chapTitleNum;
  attr-id: "chapTitle" counter(chapTitleNum);
}
body :not([data-type="metadata"]) > [data-type="document-title"] {
  content: none;
}
body :not([data-type="metadata"]) > [data-type="document-title"]::after {
  content: content();
  container: span;
  class: "text";
}
body:pass(100)::after {
  content: clear(trash);
}
body > div[data-type="page"]:pass(60),
body > div[data-type="composite-page"]:pass(60) {
  string-set: page-id attr(id);
}
body > div[data-type="page"]:pass(60) > [data-type='document-title'],
body > div[data-type="composite-page"]:pass(60) > [data-type='document-title'] {
  node-set: pageTitle;
}
body > div[data-type="page"]:pass(60)::after,
body > div[data-type="composite-page"]:pass(60)::after {
  content: nodes(pageTitle);
  attr-href: "#" string(page-id);
  container: a;
  move-to: page-link;
}
body > div[data-type="page"]:pass(60)::after,
body > div[data-type="composite-page"]:pass(60)::after {
  content: pending(page-link);
  move-to: eob-toc;
  container: li;
}
body > div[data-type='chapter']:pass(60) > h1[data-type='document-title'] {
  node-set: chapterTitle;
  string-set: chapTitle-id attr(id);
}
body > div[data-type='chapter']:pass(60)::after {
  content: nodes(chapterTitle);
  attr-href: "#" string(chapTitle-id);
  container: a;
  move-to: eoc-toc;
}
body > div[data-type='chapter']:pass(60) > div[data-type="page"],
body > div[data-type='chapter']:pass(60) > div[data-type="composite-page"] {
  string-set: page-id-chap attr(id);
}
body > div[data-type='chapter']:pass(60) > div[data-type="page"] > [data-type='document-title'],
body > div[data-type='chapter']:pass(60) > div[data-type="composite-page"] > [data-type='document-title'] {
  node-set: PageTitle;
}
body > div[data-type='chapter']:pass(60) > div[data-type="page"]::after,
body > div[data-type='chapter']:pass(60) > div[data-type="composite-page"]::after {
  content: nodes(PageTitle);
  attr-href: "#" string(page-id-chap);
  container: a;
  move-to: page-link;
}
body > div[data-type='chapter']:pass(60) > div[data-type="page"]::after,
body > div[data-type='chapter']:pass(60) > div[data-type="composite-page"]::after {
  content: pending(page-link);
  move-to: eoc-toc-pages;
  container: li;
}
body > div[data-type='chapter']:pass(60)::after {
  content: pending(eoc-toc-pages);
  container: ol;
  class: chapter;
  move-to: eoc-toc;
}
body > div[data-type='chapter']:pass(60)::after {
  content: pending(eoc-toc);
  container: li;
  move-to: eob-toc;
}
body > div[data-type="unit"]:pass(60) > h1[data-type='document-title'] {
  copy-to: eou-toc;
}
body > div[data-type="unit"]:pass(60) > div[data-type='chapter'] > h1[data-type='document-title'] {
  copy-to: eoc-toc;
}
body > div[data-type="unit"]:pass(60) > div[data-type='chapter'] > div[data-type="page"] > h2[data-type='document-title'],
body > div[data-type="unit"]:pass(60) > div[data-type='chapter'] div[data-type="composite-page"] > h2[data-type='document-title'] {
  copy-to: page-title;
}
body > div[data-type="unit"]:pass(60) > div[data-type='chapter'] > div[data-type="page"]::after,
body > div[data-type="unit"]:pass(60) > div[data-type='chapter'] div[data-type="composite-page"]::after {
  content: pending(page-title);
  move-to: eoc-toc-pages;
  container: li;
}
body > div[data-type="unit"]:pass(60) > div[data-type='chapter']::after {
  content: pending(eoc-toc-pages);
  container: ol;
  class: chapter;
  move-to: eoc-toc;
}
body > div[data-type="unit"]:pass(60) > div[data-type='chapter']::after {
  content: pending(eoc-toc);
  container: li;
  move-to: eou-toc-chapters;
}
body > div[data-type="unit"]:pass(60)::after {
  content: pending(eou-toc-chapters);
  container: ol;
  class: unit;
  move-to: eou-toc;
}
body > div[data-type="unit"]:pass(60)::after {
  content: pending(eou-toc);
  container: li;
  move-to: eob-toc;
}
nav#toc:pass(65) {
  content: '';
}
nav#toc:pass(65)::after {
  content: pending(eob-toc);
  container: ol;
}
nav#toc > ol:pass(66) li > a {
  move-to: trash;
  string-set: toc-ref attr(href);
}
nav#toc > ol:pass(66) li > a > h1 > span,
nav#toc > ol:pass(66) li > a > h2 > span,
nav#toc > ol:pass(66) li > a > div > span {
  move-to: title-spans;
}
nav#toc > ol:pass(66) li > a::outside {
  content: pending(title-spans);
  container: a;
  attr-href: string(toc-ref);
}
div[data-type='chapter'] div[data-type="glossary"] {
  move-to: trash;
}
div[data-type='chapter'] div[data-type="glossary"] dl.definition {
  move-to: eoc-glossary;
}
div[data-type='chapter']::before {
  container: span;
  content: 'Key Terms';
  move-to: titleSpan;
}
div[data-type='chapter']::before {
  container: h2;
  class: sectionGlossary;
  data-type: document-title;
  content: pending(titleSpan);
  move-to: sectionGlossary;
}
div[data-type='chapter']::after {
  class: "eoc glossary";
  data-type: composite-page;
  content: pending(sectionGlossary) pending(eoc-glossary);
  sort-by: dl> dt;
}
div[data-type='chapter'] section.summary {
  move-to: summary;
}
div[data-type='chapter'] section.summary > h1[data-type="title"] {
  move-to: trash;
}
div[data-type='chapter'] section.summary::after {
  class: summary;
  content: nodes(sectionTitle) pending(summary);
  move-to: eoc-summaries;
}
div[data-type='chapter']::before {
  container: span;
  content: "Key Concepts and Summary";
  move-to: titleSpan;
}
div[data-type='chapter']::before {
  container: h2;
  class: summary-title;
  data-type: document-title;
  content: pending(titleSpan);
  move-to: summaryTitle;
}
div[data-type='chapter']::after {
  class: "eoc summary";
  data-type: composite-page;
  content: pending(summaryTitle) pending(eoc-summaries);
}
div[data-type='chapter'] section.self-check-questions {
  move-to: self-check-questions;
}
div[data-type='chapter'] section.self-check-questions > h1[data-type="title"] {
  move-to: trash;
}
div[data-type='chapter'] section.self-check-questions div[data-type="solution"]:pass(25) {
  move-to: self-check-solutions;
}
div[data-type='chapter']::after {
  content: pending(self-check-questions);
  class: "eoc self-check-questions-container";
  container: div;
  data-type: composite-page;
}
div[data-type='chapter'] section.review-questions {
  move-to: review-questions;
}
div[data-type='chapter'] section.review-questions > h1[data-type="title"] {
  move-to: trash;
}
div[data-type='chapter']::after {
  content: pending(review-questions);
  class: "eoc review-questions-container";
  container: div;
  data-type: composite-page;
}
div[data-type='chapter'] section.critical-thinking {
  move-to: critical-thinking;
}
div[data-type='chapter'] section.critical-thinking > h1[data-type="title"] {
  move-to: trash;
}
div[data-type='chapter'] section.critical-thinking div[data-type="solution"]:pass(25) {
  move-to: critical-thinking-solutions;
}
div[data-type='chapter']::after {
  content: pending(critical-thinking);
  class: "eoc critical-thinking-container";
  container: div;
  data-type: composite-page;
}
div[data-type='chapter'] section.problems {
  move-to: problems;
}
div[data-type='chapter'] section.problems > h1[data-type="title"] {
  move-to: trash;
}
div[data-type='chapter'] section.problems div[data-type="solution"]:pass(25) {
  move-to: problems-solutions;
}
div[data-type='chapter']::after {
  content: pending(problems);
  class: "eoc problems-container";
  container: div;
  data-type: composite-page;
}
div[data-type='chapter'] section.references:pass(35) {
  move-to: references;
}
div[data-type='chapter'] section.references:pass(35) > h1[data-type="title"] {
  move-to: trash;
}
div[data-type='chapter']:pass(25)::after {
  container: h1;
  class: "chapter-area-title";
  content: "Chapter " nodes(nodeChapterNumber);
  move-to: chapterAreaTitle;
}
div[data-type='chapter']:pass(25)::after {
  container: div;
  class: "self-check-solutions";
  content: pending(chapterAreaTitle) pending(self-check-solutions);
  move-to: chapterArea;
}
div[data-type='chapter']:pass(25)::after {
  class: "chapter-area";
  content: pending(chapterArea);
  move-to: eob-all;
}
div[data-type='chapter']:pass(35)::after {
  container: h1;
  class: "chapter-area-text";
  content: nodes(nodeChapterText);
  move-to: chapterAreaText;
}
div[data-type='chapter']:pass(35)::after {
  container: div;
  class: "references";
  content: pending(references);
  move-to: refArea;
}
div[data-type='chapter']:pass(35)::after {
  class: "chapter-area";
  content: pending(chapterAreaText) pending(refArea);
  move-to: eob-references;
}
div[data-type='chapter'] .clearup:pass(30)::before {
  container: span;
  class: "text";
  content: "Clear It Up";
  move-to: titleSpan;
}
div[data-type='chapter'] .clearup:pass(30)::before {
  container: h1;
  class: "title";
  data-type: document-title;
  content: pending(titleSpan);
}
div[data-type='chapter'] .linkup:pass(30)::before {
  container: span;
  class: "text";
  content: "Link It Up";
  move-to: titleSpan;
}
div[data-type='chapter'] .linkup:pass(30)::before {
  container: h1;
  class: "title";
  data-type: document-title;
  content: pending(titleSpan);
}
div[data-type='chapter'] .bringhome:pass(30)::before {
  container: span;
  class: "text";
  content: "Bring It Home";
  move-to: titleSpan;
}
div[data-type='chapter'] .bringhome:pass(30)::before {
  container: h1;
  class: "title";
  data-type: document-title;
  content: pending(titleSpan);
}
div[data-type='chapter'] .workout:pass(30)::before {
  container: span;
  class: "text";
  content: "Work It Out";
  move-to: titleSpan;
}
div[data-type='chapter'] .workout:pass(30)::before {
  container: h1;
  class: "title";
  data-type: document-title;
  content: pending(titleSpan);
}
div[data-type='chapter'] .eoc.self-check-questions-container:pass(75) {
  content: nodes(bookMetadata) content();
}
div[data-type='chapter'] .eoc.self-check-questions-container [data-type="metadata"] [data-type="document-title"]:pass(76) {
  content: "Self-Check Questions";
}
div[data-type='chapter'] .eoc.self-check-questions-container:pass(30)::before {
  container: span;
  class: "text";
  content: "Self-Check Questions";
  move-to: titleSpan;
}
div[data-type='chapter'] .eoc.self-check-questions-container:pass(30)::before {
  container: h1;
  class: "title";
  data-type: document-title;
  content: pending(titleSpan);
}
div[data-type='chapter'] .eoc.review-questions-container:pass(75) {
  content: nodes(bookMetadata) content();
}
div[data-type='chapter'] .eoc.review-questions-container [data-type="metadata"] [data-type="document-title"]:pass(76) {
  content: "Review Questions";
}
div[data-type='chapter'] .eoc.review-questions-container:pass(30)::before {
  container: span;
  class: "text";
  content: "Review Questions";
  move-to: titleSpan;
}
div[data-type='chapter'] .eoc.review-questions-container:pass(30)::before {
  container: h1;
  class: "title";
  data-type: document-title;
  content: pending(titleSpan);
}
div[data-type='chapter'] .eoc.critical-thinking-container:pass(75) {
  content: nodes(bookMetadata) content();
}
div[data-type='chapter'] .eoc.critical-thinking-container [data-type="metadata"] [data-type="document-title"]:pass(76) {
  content: "Critical Thinking Questions";
}
div[data-type='chapter'] .eoc.critical-thinking-container:pass(30)::before {
  container: span;
  class: "text";
  content: "Critical Thinking Questions";
  move-to: titleSpan;
}
div[data-type='chapter'] .eoc.critical-thinking-container:pass(30)::before {
  container: h1;
  class: "title";
  data-type: document-title;
  content: pending(titleSpan);
}
div[data-type='chapter'] .eoc.problems-container:pass(75) {
  content: nodes(bookMetadata) content();
}
div[data-type='chapter'] .eoc.problems-container [data-type="metadata"] [data-type="document-title"]:pass(76) {
  content: "Problems";
}
div[data-type='chapter'] .eoc.problems-container:pass(30)::before {
  container: span;
  class: "text";
  content: "Problems";
  move-to: titleSpan;
}
div[data-type='chapter'] .eoc.problems-container:pass(30)::before {
  container: h1;
  class: "title";
  data-type: document-title;
  content: pending(titleSpan);
}
div[data-type='chapter'] .eoc.glossary:pass(75) {
  content: nodes(bookMetadata) content();
}
div[data-type='chapter'] .eoc.glossary [data-type="metadata"] [data-type="document-title"]:pass(76) {
  content: "Key Terms";
}
div[data-type='chapter'] .eoc.summary:pass(75) {
  content: nodes(bookMetadata) content();
}
div[data-type='chapter'] .eoc.summary [data-type="metadata"] [data-type="document-title"]:pass(76) {
  content: "Key Concepts and Summary";
}
body:pass(35)::after {
  class: "eob answer-key";
  data-type: "composite-page";
  content: pending(eob-all);
}
body:pass(36)::after {
  class: "eob references";
  data-type: "composite-page";
  content: pending(eob-references);
}
body .eob.references:pass(75) {
  content: nodes(bookMetadata) content();
}
body .eob.references [data-type="metadata"] [data-type="document-title"]:pass(76) {
  content: "References";
}
body .eob.references:pass(37)::before {
  container: span;
  class: "text";
  content: "References";
  move-to: titleSpan;
}
body .eob.references:pass(37)::before {
  container: h1;
  data-type: document-title;
  content: pending(titleSpan);
}
body .eob.answer-key:pass(75) {
  content: nodes(bookMetadata) content();
}
body .eob.answer-key [data-type="metadata"] [data-type="document-title"]:pass(76) {
  content: "Answer Key";
}
body .eob.answer-key:pass(36)::before {
  container: span;
  class: "text";
  content: "Answer Key";
  move-to: titleSpan;
}
body .eob.answer-key:pass(36)::before {
  container: h1;
  data-type: document-title;
  content: pending(titleSpan);
}
>>>>>>> correct pass syntax for mixins; update css
