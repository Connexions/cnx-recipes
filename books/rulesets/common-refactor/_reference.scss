<<<<<<< HEAD
<<<<<<< HEAD
@import "./utils";

@mixin reference_refSectionHeaderNodeAs($name) {
  div[data-type="page"],
  div[data-type="composite-page"] {
    > [data-type="document-title"] {
      @include utils_refNodeAs($name);
    }
  }
}
@mixin reference_refSectionHeaderStringAs($name) {
  div[data-type="page"],
  div[data-type="composite-page"] {
    > [data-type="document-title"] {
      @include utils_refStringAs($name, content());
    }
  }
}

@mixin reference_refChapterHeaderNodeAs($name) {
  div[data-type="chapter"] {
    @include utils_refNodeAs($name);
  }
}

@mixin reference_refChapterHeaderStringAs($name) {
  div[data-type="chapter"] {
    @include utils_refStringAs($name, content());
  }
}

@mixin reference_refPageIDStringAs($name) {
  div[data-type="page"],
  div[data-type="composite-page"] {
    @include utils_refStringAs($name, attr(id))
  }
}

@mixin reference_refBookMetadataNodeAs($name) {
  body > [data-type="metadata"] {
    @include utils_refNodeAs($name);
  }
=======
=======
@import "./utils";

>>>>>>> Rewrite composition mixins to handle pages with mapped properties
@mixin refSectionTitleNodeAs($name) {
  div[data-type="page"],
  div[data-type="composite-page"] { 
    > [data-type="document-title"] {
      @include refNodeAs($name);
    }
  }
}
@mixin refSectionTitleStringAs($name) {
  div[data-type="page"],
  div[data-type="composite-page"] { 
    > [data-type="document-title"] {
      @include refStringAs($name);
    }
  }
>>>>>>> Separate mixins into their respective files, do some work on solutions
}