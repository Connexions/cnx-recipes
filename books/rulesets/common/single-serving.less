/* This file includes parts that are used only once per book */

div[data-type='chapter'] {
  h1[data-type="document-title"] {
    node-set: chapterTitle;
    .number {
      node-set: chapterNumber;
    }
  }
  div[data-type="page"], div[data-type="composite-page"] {
    > div[data-type="document-title"] {
      pass: default, @pass-50-index;
      string-set: section-title content();
      node-set: sectionTitle;
    }
    span[data-type="term"] {
      &:match(^[a-zA-Z]) {
        attr-group-by: first-letter(content());
      }
      &:match(^[^a-zA-Z]) {
        attr-group-by: "";
      }
      &::after {
        pass: @pass-50-index;
        content: content();
        attr-group-by: attr(group-by);
        container: span;
        class: glossary-term;
        move-to: index-term;
      }
      &::after {
        pass: @pass-50-index;
        content: string(section-title);
        container: a;
        attr-href: "#" attr(id);
        move-to: link;
      }
      &::after {
        pass: @pass-50-index;
        content: pending(index-term) pending(link);
        class: index-item;
        move-to: eob-index;
      }
    }
  }
}

body {
  //copy the book's metadata
  >[data-type="metadata"] {
    node-set: bookMetadata;
  }
  //suppress the uri
  div.eoc, div.eob  {
    [data-type="cnx-archive-uri"] {
      pass: @pass-77-meta-uri;
      move-to: trash;
    }
  }

  //create the eob titles
  &::before {
    container: div;
    content: "Answer Key";
    data-type: document-title;
    move-to: answerTitle;
  }

  //create the index after container has been created
  .eob {
    &.index {
      .metadata("Index");
      &::before {
        pass: @pass-52-index-title;
        container: span;
        content: "Index";
        move-to: titleSpan;
      }
      &::before {
        pass: @pass-52-index-title;
        container: div;
        data-type: document-title;
        content: pending(titleSpan);
      }
    }
  }
  &::after {
    pass: @pass-50-index;
    class: "eob index" ;
    data-type: composite-page;
    content: pending(eob-index);
    group-by: span, "span::attr(group-by)", nocase;
  }
  .eob.index > div.group-by:first-of-type > span.group-label {
    pass: @pass-51-index-symbol;
    content: "Symbol";
  }

//Wrap all non-generated title content within a span before numbering
  :not([data-type="metadata"]) > [data-type="document-title"] {
    content: none;
    &::after {
      content: content();
      container: span;
      class: "text";
    }
  }

  //clear trash
  &::after {
    pass:100;
    content: clear(trash);
  }
}




//todo
// .feature(@name, @title, @nameTitle(@title,  @suffix) ) {
//     section.references {
//     move-to: @name;
//     > [data-type="title"] {
//       move-to: trash;
//     }
//    }
//    &::before {
//     container: h1;
//     data-type: document-title;
//     content: @title;
//     move-to: @nameTitle(@title, "Title");
//    }
//    &::after {
//     container: div;
//     class: "eoc @name";
//     data-type: composite-page;
//     content: pending(@nameTitle) pending(@name);
//   }
// }