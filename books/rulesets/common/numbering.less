// .\=(@counters) {
//   counter-reset: @counters;
// }
// .\+(@counters) {
//   counter-increment: @counters;
// }

// div[data-type='book']{
//   .\=(chapter);
// }

// div[data-type='chapter'] {
//   .\=(section figure table list);
//   .\+(chapter);

//   div[data-type="page"] {
//     .\=(subsection);
//     .\+(section);
//   }
//   .eoc-exercises {
//     .\=(exercise);
//   }
//   div[data-type='exercise'] {
//     .\+(exercise);
//   }
//   // <div data-type="document-title">Stuff</div>
//   // becomes
//   // <div data-type="document-title"><span class="titling">1</span><span class="titling">Stuff</span></div>
//   > div[data-type='document-title'] {
//     string-set: chapter-title content();
//     content: '';

//     &::span {
//       class: 'titling';
//       content: counter(chapter);
//     }
//     &::span {
//       class: 'titling';
//       content: string(chapter-title);
//     }
//   }

//   div[data-type="page"] {
//     .\=(subsection);
//     .\+(section);

//     > div[data-type='document-title'] {
//       string-set: section-title content();
//       content: '';

//       &::span {
//         class: 'titling';
//         content: counter(chapter) '.' counter(section);
//       }
//       &::span {
//         class: 'titling';
//         content: string(section-title);
//       }
//     }
//     > section {
//         .\+(subsection);
//     }
//   }

//   .eoc-section-summary > section h1.title {
//     string-set: section-title content();
//     content: '';

//     &::span {
//       class: 'titling';
//       // This implies that group-by stores a "xref" attribute
//       // with a cross reference, eg #id-5352435.
//       // These are an INTERNAL cross reference, they are not baked in
//       // to the cooked document as attributes.
//       content: target-counter(attr(xref), chapter) '.' target-counter(attr(xref), section);
//     }
//     &::span {
//       class: 'titling';
//       content: string(section-title);
//     }
//   }
//   .eoc-exercises div[data-type='problem']::before {
//     content: 'Exercise ' counter(exercise);
//   }
// }


// .x-numb () {
//   .\=(exercise);

//   > section h1.title {
//     string-set: section-title content();
//     content: '';

//     &::span {
//       class: 'titling';
//       content: target-counter(attr(xhref), chapter) '.' target-counter(attr(xref), section);
//     }
//     &::span {
//       class: 'titling';
//       content: string(section-title);
//     }
//   }

//   div[data-type='exercise'] {
//   //  .\+(exercise);
//   }
//   div[data-type='problem'] {
//     &::before {
//       content: counter(exercise) '.';
//       // If you needed to, you could also do this with
//       // the internal cross references and target-counter
//       // instead of "recounting" them here. Sometimes it's
//       // basic and this "easy" way is fine, sometimes it isn't...
//     }
//   }
// }
body {
  counter-reset: appendix;
  counter-reset: chapter;
  //Refactor: Preface is not counted but has its title re-wrapped, as is done in this file for its siblings
  div.preface {
    > div[data-type="document-title"] {
      container: h1;
      content: content();
    }
  }
  div.appendix {
    counter-increment: appendix;
    &::before {
      container: span;
      class: "toc-label";
      content: "Appendix";
      move-to: appendixLabel
    }
    &::before {
      container: span;
      class: "number";
      content: counter(appendix, upper-alpha);
      move-to: appendixNumber;
    }
    &::before {
      content: ": ";
      container: span;
      class: "divider";
      move-to: appendixDivider;
    }
    > div[data-type="document-title"] {
      container: h1;
      content: pending(appendixLabel) " " pending(appendixNumber) pending(appendixDivider) content();
    }
  }
  div[data-type="chapter"]:pass(20) {
    counter-reset: exercises;
  }
  div[data-type="chapter"] {
    counter-reset: section;
    counter-reset: example;
    counter-reset: lab;
    counter-increment: chapter;

    &::before {
      container: span;
      class: "number";
      content: counter(chapter);
      move-to: chapterNumber;
    }
    &::before {
      content: "Chapter";
      container: span;
      class: "toc-label";
      move-to: chapterLabel;
    }
    &::before {
      content: " | ";
      container: span;
      class: "divider";
      move-to: chapterDivider;
    }
    > h1[data-type="document-title"] {
      container: h1;
      content: pending(chapterLabel) " " pending(chapterNumber) pending(chapterDivider) content() ;
    }
    > div[data-type="page"] {
      // counter-increment: lab;
      // counter-reset: lab;
      &:not(:first-of-type) {
        &::before {
          counter-increment: section;
          container: span;
          class: "number";
          content: counter(chapter)"."counter(section);
          move-to: sectionNumber;
        }
        &::before {
          content: "section";
          container: span;
          class: "label";
          move-to: sectionLabel;
        }
        &::before {
          content: " | ";
          container: span;
          class: "divider";
          move-to: sectionDivider;
        }
      }
      > [data-type="document-title"] {
        data-type: "document-title";
        container: h2;
        content: pending(sectionNumber) " "pending(sectionDivider) content() ;
      }
    }
    [data-type="page"] {
      .example {
        counter-increment: example;
        &::before {
          content: counter(chapter)"."counter(example);
          container: span;
          class: "number";
          move-to: exampleNumber;
        }
        >[data-type = 'title']{
          &::before{
            content: content();
            container: span;
            class: "text";
            move-to: exampleTitle;
          }
          move-to: trash;
        }
        &::after{
          class: "example-title";
          container: h1;
          content: "Example " pending(exampleNumber) pending(exampleTitle);
          move-to: exampleTitleHeader;
        }
        &:deferred {
          content: pending(exampleTitleHeader) content();
        }
        //move me to collations
        [data-type="solution"] {
          &::before {
            container: div;
            data-type: title;
            content: "Solution " counter(chapter)"."counter(example);
          }
        }
      }
      .try {
        .exercise {
          &::before {
           class: "try-number";
           container: span;
           class: "number";
           content: counter(chapter)"."counter(example);
         }
       }
      }


      //stats specific
      .lab {
        &::before {
          content: "Stats Lab";
          class: "stat-lab-title";
          data-type: "title";
        }
        counter-increment: lab;
        >[data-type="title"] {
          &::before {
            content: counter(chapter)"."counter(lab);
            container: span;
            class: "lab-number";
            node-set: labNumber;
          }
        }
      }
    }
  }
  div[data-type="chapter"]:pass(40) {
    counter-reset: section;
    counter-reset: example;
    counter-reset: lab;
    counter-increment: chapter;

    [data-type="page"] {
      .example{
        counter-increment: example;
        string-set: target-label "Example " counter(chapter) "." counter(example);
      }
      .try{
        string-set: target-label "Try It";
      }
    }
  }

  [data-type="chapter"]:pass(40) {
    counter-reset: figure;
    counter-reset: table;
    counter-increment: chapNum;
    counter-reset: exercises-target;
    [data-target="figure"] {
      content: "Fig." target-counter(attr(href), chapNum)"."target-counter(attr(href), figure);
    }
    [data-target="table"] {
      content: "Table" target-counter(attr(href), chapNum)"."target-counter(attr(href), figure);
    }
    :not(figure) > figure {
      counter-increment: figure;
      string-set: target-label "Figure " counter(chapNum) "." counter(figure);
      figcaption {
        container: span;
        class: caption;
        content: content();
        move-to: figCaption;
      }
      &::after {
        container: span;
        content: string(target-label);
        move-to: figureNumber;
      }
      &::after {
        class: "figure-number";
        container: span ;
        content: pending(figureNumber);
        move-to: figNum;
      }
      &::after {
        class: "caption-container";
        content: pending(figNum) pending(figCaption);
        move-to: captionContainer;
      }
      &::outside {
        class:  figure;
        container: div;
        content: pending(captionContainer);
      }
    }

    :not(table) > table {
      counter-increment: table;
      string-set: target-label "Table " counter(chapNum) "." counter(table);
      caption {
        container: span;
        class: caption;
        move-to: imageCaption;
        [data-type="title"] {
          container: span;
          class: "caption-title";
          move-to: captionTitle;
        }
      }
      &::after {
        container: span;
        content: string(target-label);
        move-to: tableNumber;
      }
      &:after {
        container: span;
        class: "table-number";
        content: pending(tableNumber);
        move-to: table-number;
      }
      &::after {
        class: "caption-container";
        content: pending(table-number) pending(captionTitle) pending(imageCaption);
        move-to: captionContainer;
      }
      &::outside {
        class: table;
        container: div;
        content: pending(captionContainer);
      }
    }
  }
  .appendix:pass(40) {
    counter-reset: figure;
    counter-reset: table;
    counter-increment: apNum;
    :not(figure) > figure {
      counter-increment: figure;
      string-set: target-label "Figure " counter(apNum, upper-alpha) counter(figure);
      figcaption {
        container: span;
        class: caption;
        content: content();
        move-to: figCaption;
      }
      &::after {
        container: span;
        content: string(target-label);
        move-to: figureNumber;
      }
      &::after {
        class: "figure-number";
        container: span ;
        content: pending(figureNumber);
        move-to: figNum;
      }
      &::after {
        class: "caption-container";
        content: pending(figNum) pending(figCaption);
        move-to: captionContainer;
      }
      &::outside {
        class:  figure;
        container: div;
        content: pending(captionContainer);
      }
    }

    :not(table) > table {
      counter-increment: table;
      string-set: target-label "Table " counter(apNum, upper-alpha) counter(table);
      caption {
        container: span;
        class: caption;
        move-to: imageCaption;
        [data-type="title"] {
          container: span;
          class: "caption-title";
          move-to: captionTitle;
        }
      }
      &::after {
        container: span;
        content: string(target-label);
        move-to: tableNumber;
      }
      &:after {
        container: span;
        class: "table-number";
        content: pending(tableNumber);
        move-to: table-number;
      }
      &::after {
        class: "caption-container";
        content: pending(table-number) pending(captionTitle) pending(imageCaption);
        move-to: captionContainer;
      }
      &::outside {
        class: table;
        container: div;
        content: pending(captionContainer);
      }
    }
  }

  .eoc:pass(40)  {

    [data-type="exercise"] {
      counter-increment: exercises-target;
      string-set: target-label "Exercise " counter(chapter) "." counter(exercises-target);
    }
  }
  .eoc:pass(20)  {

    [data-type="exercise"] [data-type="problem"]  {
        counter-increment: exercises;
        string-set: exId attr(id);
        &::before {
          container: span;
          content: counter(exercises);
          node-set: exerciseNumber;
        }
      }
      [data-type="solution"] {
        &::before {
          container: a;
          attr-href: "#" string(exId);
          content: nodes(exerciseNumber);
        }
      }
    }
  a.autogenerated-content:pass(40) {
     content: target-string(attr(href), target-label);
  }
}


