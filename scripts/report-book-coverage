#!/bin/bash


arg1=$1
debugFlag1=$2 # could be --debug or --verbose (or both)
debugFlag2=$3

# Check command line args

if [ -z "${arg1}" ]
then
  >&2 echo 'ERROR: Argument Missing. You must specify the name of the book as the 1st argument or --all for all books. For example: physics'
  exit 1
fi

# Pull in the BOOK_CONFIGS
source ./books.txt || exit 1

if [ ! "${arg1}" == "--all" ]
then
  # Filter BOOK_CONFIGS to only contain the book you want to fetch
  for bookConfig in "${BOOK_CONFIGS[@]}"
  do
    read -r bookConfigName rulesetName uuid _ <<< "${bookConfig}"

    if [[ "${arg1}" = "${bookConfigName}" ]]
    then
      BOOK_CONFIGS=("${bookConfigName} ${rulesetName} ${uuid}")
      foundConfig=1
      break
    fi
  done

  if [[ ! 1 -eq "${foundConfig}" ]]
  then
    >&2 echo "ERROR: Could not find Book info for book named ${arg1}"
    >&2 echo "check ./books.txt"
    exit 1
  fi
fi

<<<<<<< 9aeda933def33063eaf6271d2b6b33729b3fbe52
for bookConfig in "${BOOK_CONFIGS[@]}"
=======
for bookName in ${BOOK_LIST}
>>>>>>> camelCase vars in generate-guide
do
  read -r bookName rulesetName uuid _ <<< "${bookConfig}"

<<<<<<< 9aeda933def33063eaf6271d2b6b33729b3fbe52
  rawFile="./data/${bookName}-raw.html"
  lcovFile="./data/${bookName}.lcov"
=======
  RAW_PATH="./data/${bookName}-raw.html"
  LCOV_PATH="./data/${bookName}.lcov"
>>>>>>> camelCase vars in generate-guide

  if [ -f "${rawFile}" ]
  then

<<<<<<< 9aeda933def33063eaf6271d2b6b33729b3fbe52
    cssFile="./books/rulesets/output/${rulesetName}.css"

=======
    RULESET_NAME_AND_UUID=($(./scripts/_convert-bookname-to-ruleset-name-and-uuid ${bookName}))
    RULESET_NAME=${RULESET_NAME_AND_UUID[0]}

    cssFile="./books/rulesets/output/${RULESET_NAME}.css"

>>>>>>> camelCase vars in generate-guide
    if [ ! -f "${cssFile}" ]
    then
      >&2 echo "ERROR: CSS File missing at ${cssFile}"
      exit 1
    fi

    # Print out the message first because css-coverage will set
    # a non-zero exit status if there are unused selectors
    # and the `set -e` at the top of this script will exit at that point

<<<<<<< 9aeda933def33063eaf6271d2b6b33729b3fbe52
    >&2 echo "==> Generating coverage for ${bookName} in ${lcovFile}"
    $(npm bin)/css-coverage --css ${cssFile} --html ${rawFile} --lcov ${lcovFile} ${debugFlag1} ${debugFlag2}
=======
    if [ "${ARG1}" == "--all" ]
    then
      >&2 echo "Generating coverage for ${bookName} in ${LCOV_PATH}"
    else
      >&2 echo "Coverage is being generated. To see an HTML version, run the following:"
      >&2 echo "genhtml ${LCOV_PATH} --output-directory ./coverage"
      >&2 echo "Note: to run this you may need to install genhtml. In OSX it is 'brew install lcov'"
    fi

    ./node_modules/.bin/css-coverage --css ${cssFile} --html ${RAW_PATH} --lcov ${LCOV_PATH} ${DEBUG_FLAG1} ${DEBUG_FLAG2}
>>>>>>> camelCase vars in generate-guide

  else
    if [ "${arg1}" == "--all" ]
    then
<<<<<<< 9aeda933def33063eaf6271d2b6b33729b3fbe52
      >&2 echo "WARNING: Skipping ${bookName} because HTML File is missing at ${rawFile}"
=======
      >&2 echo "WARNING: Skipping ${bookName} because HTML File is missing at ${RAW_PATH}"
>>>>>>> camelCase vars in generate-guide
    else
      >&2 echo "ERROR: HTML File missing at ${rawFile}"
      exit 1
    fi
  fi

done

# Generate the HTML coverage report if genhtml is installed
if [[ -n "$(genhtml --version)" ]]
then

  if [ "${arg1}" == "--all" ]
  then
    genhtml ./data/*.lcov --output-directory ./coverage || exit 1
  else
    genhtml ${lcovFile} --output-directory ./coverage || exit 1
  fi

  >&2 echo "Generated HTML coverage report in ./coverage/"

else
  >&2 echo "./data/*.lcov file(s) are generated."
  >&2 echo "Install genhtml to create an HTML coverage report."
fi
