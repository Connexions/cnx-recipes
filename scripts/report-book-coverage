#!/bin/bash


arg1=$1
debugFlag1=$2 # could be --debug or --verbose (or both)
debugFlag2=$3

# Check command line args

if [ -z "${arg1}" ]
then
  >&2 echo 'ERROR: Argument Missing. You must specify the name of the book as the 1st argument or --all for all books. For example: physics'
  exit 1
fi

# Pull in the BOOK_CONFIGS
source ./books.txt || exit 1

if [ ! "${arg1}" == "--all" ]
then
  # Filter BOOK_CONFIGS to only contain the book you want to fetch
  for bookConfig in "${BOOK_CONFIGS[@]}"
  do
    read -r bookConfigName rulesetName uuid _ <<< "${bookConfig}"

    if [[ "${arg1}" = "${bookConfigName}" ]]
    then
      BOOK_CONFIGS=("${bookConfigName} ${rulesetName} ${uuid}")
      foundConfig=1
      break
    fi
  done

  if [[ ! 1 -eq "${foundConfig}" ]]
  then
    >&2 echo "ERROR: Could not find Book info for book named ${arg1}"
    >&2 echo "check ./books.txt"
    exit 1
  fi
fi

for bookConfig in "${BOOK_CONFIGS[@]}"
do
  read -r bookName rulesetName uuid _ <<< "${bookConfig}"

  rawFile="./data/${bookName}-raw.html"
  lcovFile="./data/${bookName}.lcov"

  if [ -f "${rawFile}" ]
  then

    cssFile="./books/rulesets/output/${rulesetName}.css"

    if [ ! -f "${cssFile}" ]
    then
      >&2 echo "ERROR: CSS File missing at ${cssFile}"
      exit 1
    fi

    # Print out the message first because css-coverage will set
    # a non-zero exit status if there are unused selectors
    # and the `set -e` at the top of this script will exit at that point

    >&2 echo "==> Generating coverage for ${bookName} in ${lcovFile}"
    $(npm bin)/css-coverage --css ${cssFile} --html ${rawFile} --lcov ${lcovFile} ${debugFlag1} ${debugFlag2}

  else
    if [ "${arg1}" == "--all" ]
    then
      >&2 echo "WARNING: Skipping ${bookName} because HTML File is missing at ${rawFile}"
    else
      >&2 echo "ERROR: HTML File missing at ${rawFile}"
      exit 1
    fi
  fi

done

# Generate the HTML coverage report if genhtml is installed
if [[ -n "$(genhtml --version)" ]]
then

  if [ "${arg1}" == "--all" ]
  then
    genhtml ./data/*.lcov --output-directory ./coverage || exit 1
  else
    genhtml ${lcovFile} --output-directory ./coverage || exit 1
  fi

  >&2 echo "Generated HTML coverage report in ./coverage/"

else
  >&2 echo "./data/*.lcov file(s) are generated."
  >&2 echo "Install genhtml to create an HTML coverage report."
fi
