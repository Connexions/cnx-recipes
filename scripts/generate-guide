#!/bin/sh

bookName=$1

sassDir='./books/'
styleguideDir='./styleguide/'
sassFile="${sassDir}/rulesets/${bookName}/book.scss"
cssFile="${styleguideDir}/guide.css"
bookCssFile="${sassDir}/rulesets/output/${bookName}.css"
guideHomepageFile="./guide-homepage.md" # Relative to ${sassDir}/rulesets/

tempDir="./tmp/"
commonDocumentationDir="./books/rulesets/common"
bookDocumentationDir="./books/rulesets/${bookName}"
kssOutputFile="${tempDir}/kss-output.txt"

# Check command line args

if [ -z "${bookName}" ]
then
  >&2 echo 'ERROR: Argument Missing. You must specify the name of the book as the 1st argument. For example: physics'
  exit 1
fi



>&2 echo "==> Compiling the guide.scss file"
if [ ! -e ${styleguideDir} ]
then
  mkdir ${styleguideDir} || exit 1
fi
bundle exec sass ${sassFile} ${cssFile} || exit 1
bundle exec sass ${sassFile} ${bookCssFile} || exit 1


>&2 echo "==> Generating the baked example HTML files"

# Create a temporary directory which contains the rulesets/common/ and rulesets/${bookName} directories.
# This is because we want the styleguide to contain docs of all the common/ elements
# and the book-specific elements, and kss only allows you to point to 1 directory
# to look at all the SASS files.
if [ -d "${tempDir}" ]
then
  rm -rf "${tempDir}" || exit 1
fi
mkdir "${tempDir}" || exit 1
cp -R "${commonDocumentationDir}" "${tempDir}" || exit 1
cp -R "${bookDocumentationDir}" "${tempDir}" || exit 1

for snippetFileName in $(find "${tempDir}" -name "*.html")
do
  >&2 echo "Generating temporary ${snippetFileName}-baked.html"
  # commented because xmllint does not like html5 element names like <figure>
  # ./scripts/bake-file ${bookName} ${snippetFileName} /dev/stdout | xmllint --html --format - > ${snippetFileName}-baked.html
  ./scripts/bake-file ${bookName} ${snippetFileName} ${snippetFileName}-temp1-baked.html || exit 1

  # Construct an HTML file that contains both the raw and baked HTML
  # so it can be separated in the browser
  # (and so Phil does not have to completely rewrite kss becuase it assumes only 1 file for markup)
  echo '<section class="-kss-autogen-guide-markup" data-kss-format="html-raw">' > ${snippetFileName}-baked.html || exit 1
  cat ${snippetFileName} >> ${snippetFileName}-baked.html || exit 1
  echo '</section>' >> ${snippetFileName}-baked.html || exit 1
  echo '<section class="-kss-autogen-guide-markup" data-kss-format="html-baked">' >> ${snippetFileName}-baked.html || exit 1
  cat ${snippetFileName}-temp1-baked.html >> ${snippetFileName}-baked.html || exit 1
  echo '</section>' >> ${snippetFileName}-baked.html || exit 1

  rm ${snippetFileName}-temp1-baked.html || exit 1
done


>&2 echo "==> Generating the style guide"
# The CSS path is relative to the styleguide directory, hence `./guide.css`
# Exclude parsing the output/*.css files by setting the --mask
$(npm bin)/kss-node --template ./js/openstax-kss-builder --verbose --homepage ${guideHomepageFile} --destination ${styleguideDir} --css ./guide.css --source ${tempDir} --mask '*.less|*.sass|*.scss|*.styl|*.stylus' > "${kssOutputFile}"  || exit 1


# Delete the temp files created above
>&2 echo "==> Deleting the baked example HTML files"
for snippetFileName in $(find ./books/rulesets/ -name "*-baked.html")
do
  # echo "Removing temporary ${snippetFileName}"
  rm ${snippetFileName} || exit 1
done

# HACK: KSS-node does not error if an HTML file is missing. Instead, it prints out a warning.
# So, check the output of kss to see if any errors were reported.
missingFiles=$(cat "${kssOutputFile}" | grep 'NOT FOUND!' )
if [ -n "${missingFiles}" ]
then
  >&2 echo "ERROR: Some HTML files were missing:"
  >&2 echo "${missingFiles}"
  >&2 echo "Check ${kssOutputFile} for more details"
  exit 1
fi

>&2 echo "Guide is available at ${styleguideDir} . You can open it in a browser"
