#!/bin/bash
set -e

# This re-bakes a book on ${HOST} (or all books if using the --all argument)

# Snippet that inspired this script:
#
# To "re-bake” a book is something like:
# - Inject a ruleset into the archive in association with the book to be collated.
# `wget https://raw.githubusercontent.com/Connexions/cte/rulesets/books/rulesets/output/physics.css`
# `/var/cnx/venvs/archive/bin/cnx-archive-inject_resource --resource-filename "ruleset.css" --media-type "text/css" /etc/cnx/archive/app.ini 031da8d3-b525-429c-80cf-6c8ed997733a@9.30 physics.css`
# - Invoke the collation via a the python interpreter `import requests; resp = requests.post('http://cte-cnx-dev.cnx.org:6543/contents/031da8d3-b525-429c-80cf-6c8ed997733a/collate-content', headers={'x-api-key': 'cte-dev--sprint-6.7'}); print(resp)`
# Originally from: https://gist.github.com/pumazi/93f5ed32cb9e094e5a97415ced480a16

HOST='cte-cnx-dev.cnx.org'

ARG1=$1
BOOK_VERSION=$2

# Check command line args

if [ -z "${ARG1}" ]
then
  >&2 echo 'ERROR: Argument Missing. You must specify the name of the book as the 1st argument or --all for all books (see books.txt). For example: physics'
  exit 1
fi

# if [ "${ARG1}" == "--all" ]
# then
#   source ./books.txt
# else
#   BOOK_LIST="${ARG1}"
# fi
if [ "${ARG1}" == "--all" ]
then
  >&2 echo "--all is not a valid option because you have to specify a version for the book you want to rebake"
  exit 1
else
  BOOK_LIST="${ARG1}"
fi

. ./bin/activate


>&2 echo "Preparing to fetch book(s): ${BOOK_LIST}"

for BOOK_NAME in ${BOOK_LIST}
do

  RULESET_NAME_AND_UUID=($(./scripts/_convert-bookname-to-ruleset-name-and-uuid ${BOOK_NAME}))
  RULESET_NAME=${RULESET_NAME_AND_UUID[0]}
  BOOK_UUID_AND_VER=${RULESET_NAME_AND_UUID[1]}

  CSS_PATH="./books/rulesets/output/${RULESET_NAME}.css"

  if [ -z "${BOOK_UUID_AND_VER}" ]
  then
    >&2 echo "ERROR: Could not find Book UUID for book named ${BOOK_NAME}"
    exit 1
  fi

  if [ -z "${BOOK_VERSION}" ]
  then
    >&2 echo 'ERROR: Argument Missing. You must specify the book version as the 2nd argument for what you want to cook (I know, it is annoying)'
    >&2 echo 'The version is the @#.## in the target collection URL'
    >&2 echo "You can visit http://${HOST}/contents/${BOOK_UUID_AND_VER} to get the version number"
    exit 1
  fi

  >&2 echo "Baking book ${BOOK_NAME} ${BOOK_UUID_AND_VER} on ${HOST}"

  TEMP_CSS_PATH="~/temp.css"

  >&2 echo "Step 1/4: Copying CSS file from local machine to server"
  scp ${CSS_PATH} ${USER}@${HOST}:${TEMP_CSS_PATH}

  >&2 echo "Step 2/4: Injecting the css file into the book as ruleset.css"

  BUILD_BOOK_CMD="/var/cnx/venvs/archive/bin/cnx-archive-inject_resource --resource-filename \"ruleset.css\" --media-type \"text/css\" /etc/cnx/archive/app.ini \"${BOOK_UUID_AND_VER}@${BOOK_VERSION}\" ${TEMP_CSS_PATH}"
  ssh ${USER}@${HOST} ${BUILD_BOOK_CMD}

  >&2 echo "Step 3/4: Re-baking the book (may take up to 12 minutes)"
  python -c "import requests; resp = requests.post('http://${HOST}:6543/contents/${BOOK_UUID_AND_VER}@${BOOK_VERSION}/collate-content', headers={'x-api-key': 'cte-dev--sprint-6.7'}); print(resp)"

  >&2 echo "Step 4/4: restarting varnish because the HTML files may be cached"
  RESTART_VARNISH_CMD="varnishadm ban req.url '~' ."
  ssh ${USER}@${HOST} ${RESTART_VARNISH_CMD}

  >&2 echo "Build complete. See the changes by going to http://${HOST}/contents/${BOOK_UUID_AND_VER}@${BOOK_VERSION}"

done
