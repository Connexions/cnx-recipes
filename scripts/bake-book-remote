#!/bin/bash
set -e

# This re-bakes a book on ${HOST} (or all books if using the --all argument)

# Snippet that inspired this script:
#
# To "re-bake” a book is something like:
# - Inject a ruleset into the archive in association with the book to be collated.
# `wget https://raw.githubusercontent.com/Connexions/cte/rulesets/books/rulesets/output/physics.css`
# `/var/cnx/venvs/archive/bin/cnx-archive-inject_resource --resource-filename "ruleset.css" --media-type "text/css" /etc/cnx/archive/app.ini 031da8d3-b525-429c-80cf-6c8ed997733a@9.30 physics.css`
# - Invoke the collation via a the python interpreter `import requests; resp = requests.post('http://dev00.cnx.org.cnx.org:6543/contents/031da8d3-b525-429c-80cf-6c8ed997733a/collate-content', headers={'x-api-key': 'b07'}); print(resp)`
# Originally from: https://gist.github.com/pumazi/93f5ed32cb9e094e5a97415ced480a16

arg1=$1
bookVersion=$2

# Check command line args

if [ -z "${arg1}" ]
then
  >&2 echo 'ERROR: Argument Missing. You must specify the name of the book as the 1st argument or --all for all books (see books.txt). For example: physics'
  exit 1
fi

# Pull in the BOOK_CONFIGS
source ./books.txt || exit 1

if [[ "${arg1}" == "--all" ]]
then
  >&2 echo "--all is not supported because you have to specify the version of the book to bake"
  exit 1
else
  # Filter BOOK_CONFIGS to only contain the book you want to fetch
  for bookConfig in "${BOOK_CONFIGS[@]}"
  do
    read -r bookConfigName rulesetName uuid hostName _ <<< "${bookConfig}"

    if [[ "${arg1}" = "${bookConfigName}" ]]
    then
      BOOK_CONFIGS=("${bookConfigName} ${rulesetName} ${uuid}")
      hostName=${HOST:-${hostName}}
      foundConfig=1
      break
    fi
  done

  if [[ ! 1 -eq "${foundConfig}" ]]
  then
    >&2 echo "ERROR: Could not find Book info for book named ${arg1}"
    >&2 echo "check ./books.txt"
    exit 1
  fi
fi

if [ -z "${bookVersion}" ]
then

  # The first entry is always the book info because "--all" is not a valid commandline arg
  read -r bookName rulesetName uuid hostName _ <<< "${BOOK_CONFIGS[0]}"
  hostName=${HOST:-${hostName}}

  >&2 echo 'ERROR: Argument Missing. You must specify the book version as the 2nd argument for what you want to cook (I know, it is annoying)'
  >&2 echo 'The version is the @#.## in the target collection URL'
  >&2 echo "You can visit http://${hostName}/contents/${uuid} to get the version number"
  exit 1
fi


# Activate the venv if not already in a virtualenv
if [[ -z "${VIRTUAL_ENV}" ]]
then
  . ./venv/bin/activate
fi

./scripts/compile-books || exit 1

for bookConfig in "${BOOK_CONFIGS[@]}"
do
  read -r bookName rulesetName uuid hostName _ <<< "${bookConfig}"

  hostName=${HOST:-${hostName}}

  cssFile="./books/rulesets/output/${rulesetName}.css"

  if [ -z "${uuid}" ]
  then
    >&2 echo "ERROR: Could not find Book UUID for book named ${bookName}"
    exit 1
  fi

  >&2 echo "==> Baking book ${bookName} ${uuid} on ${hostName} ..."

  tempCssFile="~/temp.css"

  >&2 echo "==> Copying CSS file from local machine to server"
  scp ${cssFile} ${USER}@${hostName}:${tempCssFile} || exit 1

  >&2 echo "==> Injecting the css file into the book as ruleset.css"

  buildBookCmd="/var/cnx/venvs/archive/bin/cnx-archive-inject_resource --resource-filename \"ruleset.css\" --media-type \"text/css\" /etc/cnx/archive/app.ini \"${uuid}@${bookVersion}\" ${tempCssFile}"
  ssh ${USER}@${hostName} ${buildBookCmd} || exit 1

  >&2 echo "==> Re-baking the book (may take up to 12 minutes)"
  python -c "import requests; resp = requests.post('http://${hostName}:6543/contents/${uuid}@${bookVersion}/collate-content', headers={'x-api-key': 'b07'}); print(resp)" || exit 1

  >&2 echo "==> restarting varnish because the HTML files may be cached"
  restartVarnishCmd="varnishadm ban req.url '~' ."
  ssh ${USER}@${hostName} ${restartVarnishCmd} || exit 1

  >&2 echo "Build complete. See the changes by going to http://${hostName}/contents/${uuid}@${bookVersion}"

done
