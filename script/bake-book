#!/bin/bash
cd "$(dirname "$0")/.." || exit 111
source ./script/bootstrap || exit 111

arg1=$1
debugFlag1=$2
debugFlag2=$3
debugFlag3=$4
debugFlag4=$5

# Check command line args

if [ -z "${arg1}" ]; then
  _say 'ERROR: Argument Missing. You must specify the name of the book as the 1st argument (or --all). For example: physics'
  _say "You can specify additional commandline arguments like -d to this script if you want more debugging"
  die "Stopping because no commandline args were passed in"
fi


# Pull in the BOOK_CONFIGS
source ./books.txt || exit 1

if [ ! "${arg1}" == "--all" ]; then
  # Filter BOOK_CONFIGS to only contain the book you want to fetch
  for bookConfig in "${BOOK_CONFIGS[@]}"; do
    read -r bookConfigName recipeName uuid _ <<< "${bookConfig}"

    if [[ "${arg1}" = "${bookConfigName}" ]]; then
      BOOK_CONFIGS=("${bookConfigName} ${recipeName} ${uuid}")
      foundConfig=1
      break
    fi
  done

  if [[ ! 1 -eq "${foundConfig}" ]]; then
    _say "Valid books are (from ./books.txt):"
    for bookConfig in "${BOOK_CONFIGS[@]}"; do
      read -r bookName recipeName uuid _ <<< "${bookConfig}"
      _say "${bookName}"
    done
    die "Could not find Book info for book named ${arg1}"
  fi
fi


for bookConfig in "${BOOK_CONFIGS[@]}"; do
  read -r bookName recipeName uuid _ <<< "${bookConfig}"

  do_progress_quiet "Compiling CSS file" \
    ./script/compile-books "${recipeName}"

  rawFile="./data/${bookName}-raw.xhtml"
  bakedFile="./data/${bookName}-baked.xhtml"
  sassFile="./recipes/books/${recipeName}/book.scss"
  cssFile="./recipes/output/${recipeName}.css"
  lcovFile="${rawFile}.lcov"

  [[ -f "${rawFile}" ]] || die "Could not find the raw HTML file. Have you run fetch-html yet?"

  [[ -f "${sassFile}" ]] || die "Could not find the raw SCSS file at ${sassFile}"

  # Remove the baked file if it exists
  [[ ! -f "${bakedFile}" ]] || rm "${bakedFile}"

  do_progress_quiet "Baking ${rawFile} using ${recipeName} (~1min)" \
    cnx-easybake --coverage-file "${lcovFile}" "${debugFlag1}" "${debugFlag2}" "${debugFlag3}" "${debugFlag4}" "${cssFile}" "${rawFile}" "${bakedFile}"

  # Generate an HTML report (if genhtml is installed)
  if [[ -n "$(which genhtml)" ]]; then
    do_progress_quiet "Generating HTML coverage report at ./coverage/" \
      genhtml --quiet --output ./coverage/ "${lcovFile}"
  fi

  # Validate the cooked file
  do_progress_quiet "Validating ${bakedFile}" \
    cnx-epub-validate-collated "${bakedFile}"
done
