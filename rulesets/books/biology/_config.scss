/*==========================================================
  BIOLOGY PAGES
==========================================================*/

//Make pages
$pageKeyTerms               : ( name: "Key Terms", source: "glossary", isGlossary: true, sortBy: "dl > dt" );

/*
  Chapter Summary
  These should be collated at the end of a chapter and separated by which section they came from.
  Markup                    : ./styleguide/book.composite.summary.html-baked.html
  Style guide               : book.composite.summary
  */
$pageSummary                : ( name: "Chapter Summary", source: "summary", sectionSeparated: true );

/*
  Art Connection Questions
  These should be collated at the end of a chapter and have answers collated at the end of the chapter.
  **Notes:**
  Even without the styling you can see a few problems with the ruleset code:
  1. the rulesets use the class attribute when they should use the `data-type`
  1. the solution is being duplicated
  1. the solution is inside the link text that points back to the problem
  1. new id's are generated rather than using the existing id attributes for the problem and solution
  Markup                    : ./styleguide/book.composite.self-check-questions.html-baked.html
  Style guide               : book.composite.self-check-questions
*/
$pageArtConnection             : ( name: "Art Connection Questions", source: "art-exercise", hasSolutions: true );

/*
  Review Questions
  These should be collated at the end of a chapter and have answers collated at the end of the chapter.
  Markup                    : ./styleguide/book.composite.review-questions.html-baked.html
  Style guide               : book.composite.review-questions
*/
$pageReviewQuestions        : ( name: "Review Questions", source: "multiple-choice", hasSolutions: true );

/*
  Critical Thinking Questions
  These should be collated at the end of a chapter
  and have answers collated at the end of the chapter.
  Markup                    : ./styleguide/book.composite.critical-thinking.html-baked.html
  Style guide               : book.composite.critical-thinking
*/
$pageCriticalThinking       : ( name: "Critical Thinking Questions", source: "free-response", hasSolutions: true );

/*
  References
  These should be collated at the end of a chapter
  and separated by which section they came from.
  Markup                    : ./styleguide/book.composite.references.html-baked.html
  Style guide               : book.composite.references
*/
//$pageReferences             : ( name: "References", source: "references", sectionSeparated: true, chapterSeparated: false, );

$pageIndex                  : ( name: "Index", source: "index", isIndex: true );

$pageSolutions              : ( name: "Answer Key", source: "solutions", chapterSeparated: true, compoundComposite: true, isAnswerKey: true, );

$chapterCompositePages: (
  $pageKeyTerms, $pageSummary, $pageArtConnection, $pageReviewQuestions, $pageCriticalThinking
);

$bookCompositePages: (
  //This doesn't get parsed as a list without a comma at the end
  //the composite builder should account for this rather than using hacky syntax
  $pageSolutions, $pageIndex
);

/*==========================================================
  BIOLOGY TITLING CONTENT
==========================================================*/

//unfortunately a base obj cannot be created for all Content because it would make the order of the keys static
//when they need to be able to be in any order because of possible changes in titling order between books
//Usage Note: key: class of the containing span, value: text that will go inside span
$chapterTitleContent        : ( number: counter(chapter), divider: ' ' );

$appendixTitleContent       : ( title-label         :"Appendix ", number: counter(appendix, upper-alpha), divider: ' ' );

$sectionTitleContent        : ( number: counter(chapter) "." counter(section), divider: ' ' );

$exerciseTitleContent       : ( divider: ".", number: counter(exercise), );

/*
  Art Connection note
  Contains a title "Link It Up"
  Markup                    : ./styleguide/page.note.linkup.html-baked.html
  Style guide               : page.note.linkup
*/
$artConnectionNote          : ( label: "Art Connection", selector: art-connection, isBodyWrapped: true );

/*
  Career Connection note
  Contains a title "Bring It Home" and a body containing a title and the contents of the note.
  Markup                    : ./styleguide/page.note.bringhome.html-baked.html
  Style guide               : page.note.bringhome
*/

$careerConnectionNote       : ( label: "Career Connection Note", selector: career, isBodyWrapped: true );

/*
  Everyday Connection note
  Contains a title "Clear It Up" and a body containing a title and the contents of the note.
  Markup                    : ./styleguide/page.note.clearup.html-baked.html
  Style guide               : page.note.clearup
*/
$everydayConnectionNote     : ( label: "Everyday Connection", selector: everyday, isBodyWrapped: true );

/*
  Evolution Connection note
  Contains a title "Work It Out" and a body containing a title and the contents of the note.
  Markup                    : ./styleguide/page.note.workout.html-baked.html
  Style guide               : page.note.workout
*/
$evolutionConnectionNote    : ( label: "Evolution Connection", selector: evolution, isBodyWrapped: true );

/*
  Scientific Method Connection note
  Contains a title "Work It Out" and a body containing a title and the contents of the note.
  Markup                    : ./styleguide/page.note.workout.html-baked.html
  Style guide               : page.note.workout
*/
$scientificMethodConnectionNote: ( label: "Scientific Method Connection", selector: experiment, isBodyWrapped: true );

/*
  Link to Learning note
  Contains a title "Work It Out" and a body containing a title and the contents of the note.
  Markup                    : ./styleguide/page.note.workout.html-baked.html
  Style guide               : page.note.workout
*/
$linkToLearningNote         : ( label: "Link to Learning", selector: interactive );

$captionTableNumber         : ( title-label: "Table ", number: counter(chapter) "." counter(table) );

//TODO: Make a counter for both chapter and appendix, and automate the switch between standard and upper alpha counting?
$captionTableNumberAp       : ( title-label: "Table ", number: counter(appendix, upper-alpha) "." counter(table) );

$captionFigNumber           : ( title-label: "Figure ", number: counter(chapter) "." counter(figure) );

//TODO: Make a counter for both chapter and appendix, and automate the switch between standard and upper alpha counting?
$captionFigNumberAp         : ( title-label: "Figure ", number: counter(appendix, upper-alpha) "." counter(figure) );

$symbolsSectionTitle: "Symbols";

/*==========================================================
  BIOLOGY CONFIG
==========================================================*/

$setTableCaption            : ( type: table, defaultContainer: caption, hasCaption: true, hasTitle: true );

$setFigureCaption           : ( type: figure, defaultContainer: figcaption, hasCaption: true, hasTitle: true );
//If this method of setting the content of the label explicity becomes a problem,
//try grabbing the numbering information from the element's header

//NOTE: These selectors MUST match the counting selectors or be more specific
//otherwise, the increment and the counter() call may fire in the wrong order
//This may be fixed in a later version of easybake
$targetLabels: (
  (
    selector    : '.os-eoc [data-type="exercise"]',
    label       : "Exercise " counter(chapter) "." counter(exercise)
  ),
  (
    selector    : 'div[data-type="chapter"] .example',
    label       : "Example " counter(chapter) "." counter(example)
  ),
  (
    selector    : 'div[data-type="chapter"] .try',
    label       : "Try It"
  ),
  (
    selector    : '[data-type="chapter"] :not(table) > table',
    label       : "Table " counter(chapter) "." counter(table)
  ),
  (
    selector    : '[data-type="chapter"] :not(figure) > figure',
    label       : "Figure " counter(chapter) "." counter(figure)
  ),
  (
    selector    : '[data-type="appendix"] :not(table) > table',
    label       : "Table " counter(appendix, upper-alpha) "." counter(table)
  ),
  (
    selector    : '[data-type="appendix"] :not(figure) > figure',
    label       : "Table " counter(appendix, upper-alpha) "." counter(figure)
  )
);
