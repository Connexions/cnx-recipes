/*
  Book Page

  A Page is usually a section inside a chapter. It contains:

  - `[data-type='metadata']` The attribution information for this Page
  - `[data-type='document-title']` The title of the Page

  Markup: ./book.page.html-baked.html

  Style guide: book.page
*/
/*
  Page Elements

  Everything in here is specific to a Page in a book.
  A Page is usually a section inside a chapter.

  Style guide: page
*/
/*
  Metadata

  This contains attribution information and is sometimes collated to the back of the book.

  Markup:
  <div data-type="page">
    <div data-type="metadata">...</div>
  </div>

  Style guide: page.0-metadata
*/
/*
  Processing Instruction

  These are an artifact of the transforms and will disappear in the future

  Markup:
  <div data-type="page">
    <cnx-pi />
  </div>

  Style guide: page.0-processing
*/
/*
  Term

  A term which is used to make the Book Index. Terms used in a Glossary are defined in the Glossary, not here.

  **TODO:** The link in the index is an empty element so it does not show up

  **TODO:** Discuss how to automate glossary-creation

  Markup: ./page.term.html-baked.html

  Style guide: page.term
*/
/*
  Note

  A note or "feature". This is usually separated visually from the rest of the
  content in a book with a border and a separate background color.

  Contains an optional title, and optionally an additional class to help style the note

  Markup: ./page.note.html-baked.html

  Style guide: page.note
*/
/*
  Figure

  A `<figure>` is wrapped in a `<div data-type='figure'>` which contains:
  - optional `[data-type='title']`
  - `figure` element
    - `[data-type='media']` : a wrapper element which may disappear in the future
      - `img[src][alt]` : The image for the Figure

  TODO: Maybe this should use the `<picture>` element instead of the `[data-type='media']` element:
  http://www.html-baked.html5rocks.com/en/tutorials/responsive/picture-element/

  # TODO

  - Decide on what the baked markup for a figure with a title and caption should look like.
    - Proposals have mentioned using `<figcaption>` most of the time.
    - Maybe what is in the Raw HTML is _good enough_?

  Markup: ./page.figure.html-baked.html

  Style guide: page.figure
*/
/*
  Paragraph

  A Paragraph of text. Some of the common things it can contain are:

  - `[data-type='term']` : A term that is defined elsewhere (in the glossary)
  - `strong`
  - `em`
  - `[data-type='list']` : an inline list
    - `[data-type='item']` : an item in the list
  - `math` : MathML

  TODO: Move these into a separate "inline" section in the HTML guide

  Markup: ./page.para.html-baked.html

  Style guide: page.para
*/
/*
  Section

  A (sub)section of content which contains a title.

  Markup: ./page.section.html-baked.html

  Style guide: page.section
*/
/*
  Example

  An example which is usually styled to not be part of the flow of normal content
  (similar to a Note).

  Markup: ./page.example.html-baked.html

  Style guide: page.example
*/
/*
  Exercise

  An exercise contains a problem, optional title, and optional solution(s).

  Exercises are usually numbered and contain a link to the solution if it exists.
  Typically, an exercise is collated at the end of chapter.

  Solutions are collated (at the end of section, end of chapter or end of book), they are numbered (the number is the same as the exercise they are associated to) and link back to their exercise.

  Markup: ./page.exercise.html-baked.html

  Style guide: page.exercise
*/
/*
  Equation

  An equation wraps a MathML formula and is usually numbered.

  Markup: ./page.equation.html-baked.html

  Style guide: page.equation
*/
/*
  Glossary

  This element is often referred to as Key Terms in the textbook.
  It is collated as a separate Page at the end of a Chapter or a Book.
  Also, it is collected from individual glossary elements in each raw Page.

  Markup: ./book.glossary.html-baked.html

  Style guide: book.glossary
*/
/*
  Book Index

  The book Index contains terms and links to their occurences in the book.

  Markup: ./book.index.html-baked.html

  Style guide: book.index
*/
/*
  Table

  The `table` element may contain a `caption`, `tbody`, `col`, and other _usual_ elements.

  If the table contains a title, there is an additional element inside `<caption>`

  # TODO

  - Decide on what the baked markup for a table with a title and caption should look like.
    - Proposals have mentioned wrapping the `<table>` element with a `.os-table-container` element.
    - Maybe what is in the Raw HTML is _good enough_?

  Markup: ./page.table.html-baked.html

  Style guide: page.table
*/
/*
  Composite Page

  These are end-of-book or end-of-chapter Pages.

  A Composite Page is one that is automatically generated by moving/copying content from the raw pages.
  Examples include the end-of-chapter exercises, end-of-book solutions, end-of-chapter glossary, index.

  They:

  - must use data-type="composite-page".
  - must have a unique identifier (class) for styling purposes.
  - usually contain content separated by section(pages) or by chapter.
  - now appear in the TOC (currently not the case in the PDF).
  - aren't numbered in the content and in the TOC (the chapters and sections are)
  - follow the same rules as a regular data-type="page" (header hierarchy, metadata, etc.)

  Style guide: book.composite
*/
/*
  Chapter

  A Chapter contains a title and multiple Pages, one of which may be a `.introduction` Page.

  The introduction page typically contains a splash image, a chapter outline and an introductory paragraph.

  Markup: ./book.chapter.html-baked.html

  Style guide: book.chapter
*/
/*
  Unnumbered Content

  Content that has been marked with the class `.unnumbered` by the content team.

  Currently, the ruleset supports only tables and figures but
  this may apply to a note, a table, an equation, a figure.

  Markup: ./page.unnumbered.html-baked.html

  Style guide: page.unnumbered

*/
/*
  Lists

  Lists can contain a label or title and can be block content or inline.

  Markup: ./page.list.html-baked.html

  Style guide: page.list

*/
/*==========================================================
  STATISTICS PAGES
==========================================================*/
/*
  Practice Problems
  These should be collated at the end of a chapter.

  Markup: ./styleguide/book.composite.practice.html-baked.html

  Style guide: book.composite.practice
*/
/*==========================================================
  STATISTICS TITLING CONTENT
==========================================================*/
/*==========================================================
  STATISTICS CONFIG
==========================================================*/
/*
  Chapter Objectives
  This is a Note that appears in the Introduction page of every chapter.

  Markup: ./styleguide/page.note.chapter-objectives.html-baked.html

  Style guide: page.note.chapter-objectives
*/
/*
  Try It Feature

  This is a note that is numbered based on the example before it

  Style guide: page.note.try
*/
/* End-of-chapter page for section.glossary */
[data-type="chapter"] {
  /* Number the exercises for each section */ }
  [data-type="chapter"] section.glossary {
    /* discard the section since the contents (not this section) is collated to the end-of-chapter */
    display: none;
    /* Make links from exercise to solution and from solution to exercise */ }
    [data-type="chapter"] section.glossary [data-type="exercise"]::before,
    [data-type="chapter"] section.glossary [data-type="exercise"] [data-type="solution"]::before {
      content: ancestor-context('[data-type="chapter"]', count-of-type('section.glossary [data-type="exercise"]')); }
    [data-type="chapter"] section.glossary [data-type="exercise"]:not(:not(SASS_HACK):has([data-type="solution"]))::before {
      /* Make the number for an exercise without solution bold */
      tag-name-set: "strong"; }
    [data-type="chapter"] section.glossary [data-type="exercise"]:has([data-type="solution"])::before {
      tag-name-set: "a";
      attrs-add: "href" "#" descendant-context('[data-type="solution"]', attr(id)); }
    [data-type="chapter"] section.glossary [data-type="exercise"] [data-type="solution"]::before {
      tag-name-set: "a";
      attrs-add: "href" "#" parent-context(attr(id)); }
  [data-type="chapter"]:has([data-type="glossary"] > dl > dt) {
    /* Only generate a glossary if there are terms in this chapter */
    /* Discard the old section-level glossary element */ }
    [data-type="chapter"]:has([data-type="glossary"] > dl > dt) [data-type="glossary"] {
      display: none; }
    [data-type="chapter"]:has([data-type="glossary"] > dl > dt)::after(1)::before {
      tag-name-set: "h2";
      content: "Key Terms"; }
    [data-type="chapter"]:has([data-type="glossary"] > dl > dt)::after(1)::after {
      tag-name-set: "ul"; }
      [data-type="chapter"]:has([data-type="glossary"] > dl > dt)::after(1)::after::for-each-descendant(1, '[data-type="glossary"] > dl > dt') {
        tag-name-set: "li"; }
        [data-type="chapter"]:has([data-type="glossary"] > dl > dt)::after(1)::after::for-each-descendant(1, '[data-type="glossary"] > dl > dt')::after(1) {
          tag-name-set: "strong";
          class-add: "term";
          content: text-contents(); }
        [data-type="chapter"]:has([data-type="glossary"] > dl > dt)::after(1)::after::for-each-descendant(1, '[data-type="glossary"] > dl > dt')::after(2) {
          tag-name-set: "span";
          class-add: "separator";
          content: ": "; }
        [data-type="chapter"]:has([data-type="glossary"] > dl > dt)::after(1)::after::for-each-descendant(1, '[data-type="glossary"] > dl > dt')::after(3) {
          class-add: "definition";
          content: next-sibling-context("dd:first", text-contents()); }

/* End-of-chapter page for section.summary */
[data-type="chapter"] {
  /* Number the exercises for each section */ }
  [data-type="chapter"] section.summary {
    /* discard the section since the contents (not this section) is collated to the end-of-chapter */
    display: none;
    /* Make links from exercise to solution and from solution to exercise */ }
    [data-type="chapter"] section.summary [data-type="exercise"]::before,
    [data-type="chapter"] section.summary [data-type="exercise"] [data-type="solution"]::before {
      content: ancestor-context('[data-type="chapter"]', add(count-all-of-type('section.glossary [data-type="exercise"]'), count-of-type('section.summary [data-type="exercise"]'))); }
    [data-type="chapter"] section.summary [data-type="exercise"]:not(:not(SASS_HACK):has([data-type="solution"]))::before {
      /* Make the number for an exercise without solution bold */
      tag-name-set: "strong"; }
    [data-type="chapter"] section.summary [data-type="exercise"]:has([data-type="solution"])::before {
      tag-name-set: "a";
      attrs-add: "href" "#" descendant-context('[data-type="solution"]', attr(id)); }
    [data-type="chapter"] section.summary [data-type="exercise"] [data-type="solution"]::before {
      tag-name-set: "a";
      attrs-add: "href" "#" parent-context(attr(id)); }
  [data-type="chapter"]:has(section.summary)::after(2) {
    /* Title */
    /* Is sectionSeparated */ }
    [data-type="chapter"]:has(section.summary)::after(2)::before {
      tag-name-set: "h2";
      content: "Chapter Review"; }
    [data-type="chapter"]:has(section.summary)::after(2)::for-each-descendant(1, '> [data-type="page"]'):has(section.summary) {
      class-add: "eoc-section";
      content: move-here('section.summary > *:not([data-type="title"])'); }
      [data-type="chapter"]:has(section.summary)::after(2)::for-each-descendant(1, '> [data-type="page"]'):has(section.summary):has(> [data-type="metadata"] > [data-type="document-title"]):not(:not(SASS_HACK):has(cnx-pi[data-type="cnx.flag.introduction"])) {
        /* Number the non-Introduction Pages */ }
        [data-type="chapter"]:has(section.summary)::after(2)::for-each-descendant(1, '> [data-type="page"]'):has(section.summary):has(> [data-type="metadata"] > [data-type="document-title"]):not(:not(SASS_HACK):has(cnx-pi[data-type="cnx.flag.introduction"]))::before {
          tag-name-set: "h3";
          class-add: "section-title";
          content: descendant-context('> [data-type="metadata"] > [data-type="document-title"]', text-contents()); }
          [data-type="chapter"]:has(section.summary)::after(2)::for-each-descendant(1, '> [data-type="page"]'):has(section.summary):has(> [data-type="metadata"] > [data-type="document-title"]):not(:not(SASS_HACK):has(cnx-pi[data-type="cnx.flag.introduction"]))::before::before {
            /* Section Numbering */
            tag-name-set: "a";
            attrs-add: "href" "#" attr(id);
            content: ancestor-context("body", count-of-type('[data-type="chapter"]')) "." ancestor-context('[data-type="chapter"]', count-of-type('[data-type="page"]:not(:has(cnx-pi[data-type="cnx.flag.introduction"]))')) " "; }
      [data-type="chapter"]:has(section.summary)::after(2)::for-each-descendant(1, '> [data-type="page"]'):has(section.summary):has(> [data-type="metadata"] > [data-type="document-title"]):has(cnx-pi[data-type="cnx.flag.introduction"]) {
        /* Add a title but do not number the Introduction modules */ }
        [data-type="chapter"]:has(section.summary)::after(2)::for-each-descendant(1, '> [data-type="page"]'):has(section.summary):has(> [data-type="metadata"] > [data-type="document-title"]):has(cnx-pi[data-type="cnx.flag.introduction"])::before {
          tag-name-set: "h3";
          class-add: "section-title";
          content: descendant-context('> [data-type="metadata"] > [data-type="document-title"]', text-contents()); }

/* End-of-chapter page for section.formula-review */
[data-type="chapter"] {
  /* Number the exercises for each section */ }
  [data-type="chapter"] section.formula-review {
    /* discard the section since the contents (not this section) is collated to the end-of-chapter */
    display: none;
    /* Make links from exercise to solution and from solution to exercise */ }
    [data-type="chapter"] section.formula-review [data-type="exercise"]::before,
    [data-type="chapter"] section.formula-review [data-type="exercise"] [data-type="solution"]::before {
      content: ancestor-context('[data-type="chapter"]', add(count-all-of-type('section.glossary [data-type="exercise"], section.summary [data-type="exercise"]'), count-of-type('section.formula-review [data-type="exercise"]'))); }
    [data-type="chapter"] section.formula-review [data-type="exercise"]:not(:not(SASS_HACK):has([data-type="solution"]))::before {
      /* Make the number for an exercise without solution bold */
      tag-name-set: "strong"; }
    [data-type="chapter"] section.formula-review [data-type="exercise"]:has([data-type="solution"])::before {
      tag-name-set: "a";
      attrs-add: "href" "#" descendant-context('[data-type="solution"]', attr(id)); }
    [data-type="chapter"] section.formula-review [data-type="exercise"] [data-type="solution"]::before {
      tag-name-set: "a";
      attrs-add: "href" "#" parent-context(attr(id)); }
  [data-type="chapter"]:has(section.formula-review)::after(3) {
    /* Title */
    /* Is sectionSeparated */ }
    [data-type="chapter"]:has(section.formula-review)::after(3)::before {
      tag-name-set: "h2";
      content: "Formula Review"; }
    [data-type="chapter"]:has(section.formula-review)::after(3)::for-each-descendant(1, '> [data-type="page"]'):has(section.formula-review) {
      class-add: "eoc-section";
      content: move-here('section.formula-review > *:not([data-type="title"])'); }
      [data-type="chapter"]:has(section.formula-review)::after(3)::for-each-descendant(1, '> [data-type="page"]'):has(section.formula-review):has(> [data-type="metadata"] > [data-type="document-title"]):not(:not(SASS_HACK):has(cnx-pi[data-type="cnx.flag.introduction"])) {
        /* Number the non-Introduction Pages */ }
        [data-type="chapter"]:has(section.formula-review)::after(3)::for-each-descendant(1, '> [data-type="page"]'):has(section.formula-review):has(> [data-type="metadata"] > [data-type="document-title"]):not(:not(SASS_HACK):has(cnx-pi[data-type="cnx.flag.introduction"]))::before {
          tag-name-set: "h3";
          class-add: "section-title";
          content: descendant-context('> [data-type="metadata"] > [data-type="document-title"]', text-contents()); }
          [data-type="chapter"]:has(section.formula-review)::after(3)::for-each-descendant(1, '> [data-type="page"]'):has(section.formula-review):has(> [data-type="metadata"] > [data-type="document-title"]):not(:not(SASS_HACK):has(cnx-pi[data-type="cnx.flag.introduction"]))::before::before {
            /* Section Numbering */
            tag-name-set: "a";
            attrs-add: "href" "#" attr(id);
            content: ancestor-context("body", count-of-type('[data-type="chapter"]')) "." ancestor-context('[data-type="chapter"]', count-of-type('[data-type="page"]:not(:has(cnx-pi[data-type="cnx.flag.introduction"]))')) " "; }
      [data-type="chapter"]:has(section.formula-review)::after(3)::for-each-descendant(1, '> [data-type="page"]'):has(section.formula-review):has(> [data-type="metadata"] > [data-type="document-title"]):has(cnx-pi[data-type="cnx.flag.introduction"]) {
        /* Add a title but do not number the Introduction modules */ }
        [data-type="chapter"]:has(section.formula-review)::after(3)::for-each-descendant(1, '> [data-type="page"]'):has(section.formula-review):has(> [data-type="metadata"] > [data-type="document-title"]):has(cnx-pi[data-type="cnx.flag.introduction"])::before {
          tag-name-set: "h3";
          class-add: "section-title";
          content: descendant-context('> [data-type="metadata"] > [data-type="document-title"]', text-contents()); }

/* End-of-chapter page for section.practice */
[data-type="chapter"] {
  /* Number the exercises for each section */ }
  [data-type="chapter"] section.practice {
    /* discard the section since the contents (not this section) is collated to the end-of-chapter */
    display: none;
    /* Make links from exercise to solution and from solution to exercise */ }
    [data-type="chapter"] section.practice [data-type="exercise"]::before,
    [data-type="chapter"] section.practice [data-type="exercise"] [data-type="solution"]::before {
      content: ancestor-context('[data-type="chapter"]', add(count-all-of-type('section.glossary [data-type="exercise"], section.summary [data-type="exercise"], section.formula-review [data-type="exercise"]'), count-of-type('section.practice [data-type="exercise"]'))); }
    [data-type="chapter"] section.practice [data-type="exercise"]:not(:not(SASS_HACK):has([data-type="solution"]))::before {
      /* Make the number for an exercise without solution bold */
      tag-name-set: "strong"; }
    [data-type="chapter"] section.practice [data-type="exercise"]:has([data-type="solution"])::before {
      tag-name-set: "a";
      attrs-add: "href" "#" descendant-context('[data-type="solution"]', attr(id)); }
    [data-type="chapter"] section.practice [data-type="exercise"] [data-type="solution"]::before {
      tag-name-set: "a";
      attrs-add: "href" "#" parent-context(attr(id)); }
  [data-type="chapter"]:has(section.practice)::after(4) {
    /* Title */
    /* Is sectionSeparated */ }
    [data-type="chapter"]:has(section.practice)::after(4)::before {
      tag-name-set: "h2";
      content: "Practice"; }
    [data-type="chapter"]:has(section.practice)::after(4)::for-each-descendant(1, '> [data-type="page"]'):has(section.practice) {
      class-add: "eoc-section";
      content: move-here('section.practice > *:not([data-type="title"])'); }
      [data-type="chapter"]:has(section.practice)::after(4)::for-each-descendant(1, '> [data-type="page"]'):has(section.practice):has(> [data-type="metadata"] > [data-type="document-title"]):not(:not(SASS_HACK):has(cnx-pi[data-type="cnx.flag.introduction"])) {
        /* Number the non-Introduction Pages */ }
        [data-type="chapter"]:has(section.practice)::after(4)::for-each-descendant(1, '> [data-type="page"]'):has(section.practice):has(> [data-type="metadata"] > [data-type="document-title"]):not(:not(SASS_HACK):has(cnx-pi[data-type="cnx.flag.introduction"]))::before {
          tag-name-set: "h3";
          class-add: "section-title";
          content: descendant-context('> [data-type="metadata"] > [data-type="document-title"]', text-contents()); }
          [data-type="chapter"]:has(section.practice)::after(4)::for-each-descendant(1, '> [data-type="page"]'):has(section.practice):has(> [data-type="metadata"] > [data-type="document-title"]):not(:not(SASS_HACK):has(cnx-pi[data-type="cnx.flag.introduction"]))::before::before {
            /* Section Numbering */
            tag-name-set: "a";
            attrs-add: "href" "#" attr(id);
            content: ancestor-context("body", count-of-type('[data-type="chapter"]')) "." ancestor-context('[data-type="chapter"]', count-of-type('[data-type="page"]:not(:has(cnx-pi[data-type="cnx.flag.introduction"]))')) " "; }
      [data-type="chapter"]:has(section.practice)::after(4)::for-each-descendant(1, '> [data-type="page"]'):has(section.practice):has(> [data-type="metadata"] > [data-type="document-title"]):has(cnx-pi[data-type="cnx.flag.introduction"]) {
        /* Add a title but do not number the Introduction modules */ }
        [data-type="chapter"]:has(section.practice)::after(4)::for-each-descendant(1, '> [data-type="page"]'):has(section.practice):has(> [data-type="metadata"] > [data-type="document-title"]):has(cnx-pi[data-type="cnx.flag.introduction"])::before {
          tag-name-set: "h3";
          class-add: "section-title";
          content: descendant-context('> [data-type="metadata"] > [data-type="document-title"]', text-contents()); }

/* End-of-chapter page for section.bring-together-exercises */
[data-type="chapter"] {
  /* Number the exercises for each section */ }
  [data-type="chapter"] section.bring-together-exercises {
    /* discard the section since the contents (not this section) is collated to the end-of-chapter */
    display: none;
    /* Make links from exercise to solution and from solution to exercise */ }
    [data-type="chapter"] section.bring-together-exercises [data-type="exercise"]::before,
    [data-type="chapter"] section.bring-together-exercises [data-type="exercise"] [data-type="solution"]::before {
      content: ancestor-context('[data-type="chapter"]', add(count-all-of-type('section.glossary [data-type="exercise"], section.summary [data-type="exercise"], section.formula-review [data-type="exercise"], section.practice [data-type="exercise"]'), count-of-type('section.bring-together-exercises [data-type="exercise"]'))); }
    [data-type="chapter"] section.bring-together-exercises [data-type="exercise"]:not(:not(SASS_HACK):has([data-type="solution"]))::before {
      /* Make the number for an exercise without solution bold */
      tag-name-set: "strong"; }
    [data-type="chapter"] section.bring-together-exercises [data-type="exercise"]:has([data-type="solution"])::before {
      tag-name-set: "a";
      attrs-add: "href" "#" descendant-context('[data-type="solution"]', attr(id)); }
    [data-type="chapter"] section.bring-together-exercises [data-type="exercise"] [data-type="solution"]::before {
      tag-name-set: "a";
      attrs-add: "href" "#" parent-context(attr(id)); }
  [data-type="chapter"]:has(section.bring-together-exercises)::after(5) {
    /* Title */
    /* Not sectionSeparated */
    content: ancestor-context('[data-type="chapter"]', move-here('section.bring-together-exercises > *:not([data-type="title"])')); }
    [data-type="chapter"]:has(section.bring-together-exercises)::after(5)::before {
      tag-name-set: "h2";
      content: "Bringing It Together: Exercises"; }

/* End-of-chapter page for section.free-response */
[data-type="chapter"] {
  /* Number the exercises for each section */ }
  [data-type="chapter"] section.free-response {
    /* discard the section since the contents (not this section) is collated to the end-of-chapter */
    display: none;
    /* Make links from exercise to solution and from solution to exercise */ }
    [data-type="chapter"] section.free-response [data-type="exercise"]::before,
    [data-type="chapter"] section.free-response [data-type="exercise"] [data-type="solution"]::before {
      content: ancestor-context('[data-type="chapter"]', add(count-all-of-type('section.glossary [data-type="exercise"], section.summary [data-type="exercise"], section.formula-review [data-type="exercise"], section.practice [data-type="exercise"], section.bring-together-exercises [data-type="exercise"]'), count-of-type('section.free-response [data-type="exercise"]'))); }
    [data-type="chapter"] section.free-response [data-type="exercise"]:not(:not(SASS_HACK):has([data-type="solution"]))::before {
      /* Make the number for an exercise without solution bold */
      tag-name-set: "strong"; }
    [data-type="chapter"] section.free-response [data-type="exercise"]:has([data-type="solution"])::before {
      tag-name-set: "a";
      attrs-add: "href" "#" descendant-context('[data-type="solution"]', attr(id)); }
    [data-type="chapter"] section.free-response [data-type="exercise"] [data-type="solution"]::before {
      tag-name-set: "a";
      attrs-add: "href" "#" parent-context(attr(id)); }
  [data-type="chapter"]:has(section.free-response)::after(6) {
    /* Title */
    /* Is sectionSeparated */ }
    [data-type="chapter"]:has(section.free-response)::after(6)::before {
      tag-name-set: "h2";
      content: "Homework"; }
    [data-type="chapter"]:has(section.free-response)::after(6)::for-each-descendant(1, '> [data-type="page"]'):has(section.free-response) {
      class-add: "eoc-section";
      content: move-here('section.free-response > *:not([data-type="title"])'); }
      [data-type="chapter"]:has(section.free-response)::after(6)::for-each-descendant(1, '> [data-type="page"]'):has(section.free-response):has(> [data-type="metadata"] > [data-type="document-title"]):not(:not(SASS_HACK):has(cnx-pi[data-type="cnx.flag.introduction"])) {
        /* Number the non-Introduction Pages */ }
        [data-type="chapter"]:has(section.free-response)::after(6)::for-each-descendant(1, '> [data-type="page"]'):has(section.free-response):has(> [data-type="metadata"] > [data-type="document-title"]):not(:not(SASS_HACK):has(cnx-pi[data-type="cnx.flag.introduction"]))::before {
          tag-name-set: "h3";
          class-add: "section-title";
          content: descendant-context('> [data-type="metadata"] > [data-type="document-title"]', text-contents()); }
          [data-type="chapter"]:has(section.free-response)::after(6)::for-each-descendant(1, '> [data-type="page"]'):has(section.free-response):has(> [data-type="metadata"] > [data-type="document-title"]):not(:not(SASS_HACK):has(cnx-pi[data-type="cnx.flag.introduction"]))::before::before {
            /* Section Numbering */
            tag-name-set: "a";
            attrs-add: "href" "#" attr(id);
            content: ancestor-context("body", count-of-type('[data-type="chapter"]')) "." ancestor-context('[data-type="chapter"]', count-of-type('[data-type="page"]:not(:has(cnx-pi[data-type="cnx.flag.introduction"]))')) " "; }
      [data-type="chapter"]:has(section.free-response)::after(6)::for-each-descendant(1, '> [data-type="page"]'):has(section.free-response):has(> [data-type="metadata"] > [data-type="document-title"]):has(cnx-pi[data-type="cnx.flag.introduction"]) {
        /* Add a title but do not number the Introduction modules */ }
        [data-type="chapter"]:has(section.free-response)::after(6)::for-each-descendant(1, '> [data-type="page"]'):has(section.free-response):has(> [data-type="metadata"] > [data-type="document-title"]):has(cnx-pi[data-type="cnx.flag.introduction"])::before {
          tag-name-set: "h3";
          class-add: "section-title";
          content: descendant-context('> [data-type="metadata"] > [data-type="document-title"]', text-contents()); }

/* End-of-chapter page for section.bring-together-homework */
[data-type="chapter"] {
  /* Number the exercises for each section */ }
  [data-type="chapter"] section.bring-together-homework {
    /* discard the section since the contents (not this section) is collated to the end-of-chapter */
    display: none;
    /* Make links from exercise to solution and from solution to exercise */ }
    [data-type="chapter"] section.bring-together-homework [data-type="exercise"]::before,
    [data-type="chapter"] section.bring-together-homework [data-type="exercise"] [data-type="solution"]::before {
      content: ancestor-context('[data-type="chapter"]', add(count-all-of-type('section.glossary [data-type="exercise"], section.summary [data-type="exercise"], section.formula-review [data-type="exercise"], section.practice [data-type="exercise"], section.bring-together-exercises [data-type="exercise"], section.free-response [data-type="exercise"]'), count-of-type('section.bring-together-homework [data-type="exercise"]'))); }
    [data-type="chapter"] section.bring-together-homework [data-type="exercise"]:not(:not(SASS_HACK):has([data-type="solution"]))::before {
      /* Make the number for an exercise without solution bold */
      tag-name-set: "strong"; }
    [data-type="chapter"] section.bring-together-homework [data-type="exercise"]:has([data-type="solution"])::before {
      tag-name-set: "a";
      attrs-add: "href" "#" descendant-context('[data-type="solution"]', attr(id)); }
    [data-type="chapter"] section.bring-together-homework [data-type="exercise"] [data-type="solution"]::before {
      tag-name-set: "a";
      attrs-add: "href" "#" parent-context(attr(id)); }
  [data-type="chapter"]:has(section.bring-together-homework)::after(7) {
    /* Title */
    /* Not sectionSeparated */
    content: ancestor-context('[data-type="chapter"]', move-here('section.bring-together-homework > *:not([data-type="title"])')); }
    [data-type="chapter"]:has(section.bring-together-homework)::after(7)::before {
      tag-name-set: "h2";
      content: "Bringing It Together: Homework"; }

/* End-of-chapter page for section.references */
[data-type="chapter"] {
  /* Number the exercises for each section */ }
  [data-type="chapter"] section.references {
    /* discard the section since the contents (not this section) is collated to the end-of-chapter */
    display: none;
    /* Make links from exercise to solution and from solution to exercise */ }
    [data-type="chapter"] section.references [data-type="exercise"]::before,
    [data-type="chapter"] section.references [data-type="exercise"] [data-type="solution"]::before {
      content: ancestor-context('[data-type="chapter"]', add(count-all-of-type('section.glossary [data-type="exercise"], section.summary [data-type="exercise"], section.formula-review [data-type="exercise"], section.practice [data-type="exercise"], section.bring-together-exercises [data-type="exercise"], section.free-response [data-type="exercise"], section.bring-together-homework [data-type="exercise"]'), count-of-type('section.references [data-type="exercise"]'))); }
    [data-type="chapter"] section.references [data-type="exercise"]:not(:not(SASS_HACK):has([data-type="solution"]))::before {
      /* Make the number for an exercise without solution bold */
      tag-name-set: "strong"; }
    [data-type="chapter"] section.references [data-type="exercise"]:has([data-type="solution"])::before {
      tag-name-set: "a";
      attrs-add: "href" "#" descendant-context('[data-type="solution"]', attr(id)); }
    [data-type="chapter"] section.references [data-type="exercise"] [data-type="solution"]::before {
      tag-name-set: "a";
      attrs-add: "href" "#" parent-context(attr(id)); }
  [data-type="chapter"]:has(section.references)::after(8) {
    /* Title */
    /* Is sectionSeparated */ }
    [data-type="chapter"]:has(section.references)::after(8)::before {
      tag-name-set: "h2";
      content: "References"; }
    [data-type="chapter"]:has(section.references)::after(8)::for-each-descendant(1, '> [data-type="page"]'):has(section.references) {
      class-add: "eoc-section";
      content: move-here('section.references > *:not([data-type="title"])'); }
      [data-type="chapter"]:has(section.references)::after(8)::for-each-descendant(1, '> [data-type="page"]'):has(section.references):has(> [data-type="metadata"] > [data-type="document-title"]):not(:not(SASS_HACK):has(cnx-pi[data-type="cnx.flag.introduction"])) {
        /* Number the non-Introduction Pages */ }
        [data-type="chapter"]:has(section.references)::after(8)::for-each-descendant(1, '> [data-type="page"]'):has(section.references):has(> [data-type="metadata"] > [data-type="document-title"]):not(:not(SASS_HACK):has(cnx-pi[data-type="cnx.flag.introduction"]))::before {
          tag-name-set: "h3";
          class-add: "section-title";
          content: descendant-context('> [data-type="metadata"] > [data-type="document-title"]', text-contents()); }
          [data-type="chapter"]:has(section.references)::after(8)::for-each-descendant(1, '> [data-type="page"]'):has(section.references):has(> [data-type="metadata"] > [data-type="document-title"]):not(:not(SASS_HACK):has(cnx-pi[data-type="cnx.flag.introduction"]))::before::before {
            /* Section Numbering */
            tag-name-set: "a";
            attrs-add: "href" "#" attr(id);
            content: ancestor-context("body", count-of-type('[data-type="chapter"]')) "." ancestor-context('[data-type="chapter"]', count-of-type('[data-type="page"]:not(:has(cnx-pi[data-type="cnx.flag.introduction"]))')) " "; }
      [data-type="chapter"]:has(section.references)::after(8)::for-each-descendant(1, '> [data-type="page"]'):has(section.references):has(> [data-type="metadata"] > [data-type="document-title"]):has(cnx-pi[data-type="cnx.flag.introduction"]) {
        /* Add a title but do not number the Introduction modules */ }
        [data-type="chapter"]:has(section.references)::after(8)::for-each-descendant(1, '> [data-type="page"]'):has(section.references):has(> [data-type="metadata"] > [data-type="document-title"]):has(cnx-pi[data-type="cnx.flag.introduction"])::before {
          tag-name-set: "h3";
          class-add: "section-title";
          content: descendant-context('> [data-type="metadata"] > [data-type="document-title"]', text-contents()); }

/* End-of-chapter page for section.solutions */
[data-type="chapter"] {
  /* Number the exercises for each section */ }
  [data-type="chapter"] section.solutions {
    /* discard the section since the contents (not this section) is collated to the end-of-chapter */
    display: none;
    /* Make links from exercise to solution and from solution to exercise */ }
    [data-type="chapter"] section.solutions [data-type="exercise"]::before,
    [data-type="chapter"] section.solutions [data-type="exercise"] [data-type="solution"]::before {
      content: ancestor-context('[data-type="chapter"]', add(count-all-of-type('section.glossary [data-type="exercise"], section.summary [data-type="exercise"], section.formula-review [data-type="exercise"], section.practice [data-type="exercise"], section.bring-together-exercises [data-type="exercise"], section.free-response [data-type="exercise"], section.bring-together-homework [data-type="exercise"], section.references [data-type="exercise"]'), count-of-type('section.solutions [data-type="exercise"]'))); }
    [data-type="chapter"] section.solutions [data-type="exercise"]:not(:not(SASS_HACK):has([data-type="solution"]))::before {
      /* Make the number for an exercise without solution bold */
      tag-name-set: "strong"; }
    [data-type="chapter"] section.solutions [data-type="exercise"]:has([data-type="solution"])::before {
      tag-name-set: "a";
      attrs-add: "href" "#" descendant-context('[data-type="solution"]', attr(id)); }
    [data-type="chapter"] section.solutions [data-type="exercise"] [data-type="solution"]::before {
      tag-name-set: "a";
      attrs-add: "href" "#" parent-context(attr(id)); }
  [data-type="chapter"]:has(section.solutions)::after(9) {
    /* Title */
    /* Not sectionSeparated */
    content: ancestor-context('[data-type="chapter"]', move-here('section.solutions > *:not([data-type="title"])')); }
    [data-type="chapter"]:has(section.solutions)::after(9)::before {
      tag-name-set: "h2";
      content: "Solutions"; }

[data-type="chapter"] {
  /* Numbers on chapters and sections */
  /* Discard Page metadata but keep the title (and add its number) */ }
  [data-type="chapter"] > [data-type="document-title"]::before {
    tag-name-set: "span";
    content: ancestor-context("body", count-of-type('[data-type="chapter"]')) ". "; }
  [data-type="chapter"] [data-type="page"] {
    /* The following are hacks for the styleguide since they are missing metadata */ }
    [data-type="chapter"] [data-type="page"] > [data-type="metadata"] {
      /* TODO: Move this to an attribution section at the end of the book */
      display: none; }
    [data-type="chapter"] [data-type="page"]:not(:not(SASS_HACK):has(cnx-pi[data-type="cnx.flag.introduction"])):has(> [data-type="metadata"] > [data-type="document-title"])::before {
      tag-name-set: "h2";
      content: descendant-context('> [data-type="metadata"] > [data-type="document-title"]', text-contents()); }
      [data-type="chapter"] [data-type="page"]:not(:not(SASS_HACK):has(cnx-pi[data-type="cnx.flag.introduction"])):has(> [data-type="metadata"] > [data-type="document-title"])::before::before {
        tag-name-set: "span";
        content: ancestor-context("body", count-of-type('[data-type="chapter"]')) "." ancestor-context('[data-type="chapter"]', count-of-type('[data-type="page"]:not(:has(cnx-pi[data-type="cnx.flag.introduction"]))')) " "; }
    [data-type="chapter"] [data-type="page"]:has(cnx-pi[data-type="cnx.flag.introduction"]):has(> [data-type="metadata"] > [data-type="document-title"])::before {
      /* Label the Introduction but do not add a number */
      tag-name-set: "h2";
      content: descendant-context('> [data-type="metadata"] > [data-type="document-title"]', text-contents()); }
    [data-type="chapter"] [data-type="page"]:not(:not(SASS_HACK):has(> [data-type="metadata"] > [data-type="document-title"])):has(> [data-type="document-title"])::before {
      tag-name-set: "h2";
      content: descendant-context('> [data-type="document-title"]', text-contents()); }
      [data-type="chapter"] [data-type="page"]:not(:not(SASS_HACK):has(> [data-type="metadata"] > [data-type="document-title"])):has(> [data-type="document-title"])::before::before {
        tag-name-set: "span";
        content: ancestor-context("body", count-of-type('[data-type="chapter"]')) "." ancestor-context('[data-type="chapter"]', count-of-type('[data-type="page"]:not(:has(cnx-pi[data-type="cnx.flag.introduction"]))')) " "; }
    [data-type="chapter"] [data-type="page"]:not(:not(SASS_HACK):has(> [data-type="metadata"] > [data-type="document-title"])):not(:not(SASS_HACK):has(> [data-type="document-title"]))::before {
      tag-name-set: "h2";
      content: "STYLEGUIDE_TITLE_PLACEHOLDER"; }
      [data-type="chapter"] [data-type="page"]:not(:not(SASS_HACK):has(> [data-type="metadata"] > [data-type="document-title"])):not(:not(SASS_HACK):has(> [data-type="document-title"]))::before::before {
        tag-name-set: "span";
        content: ancestor-context("body", count-of-type('[data-type="chapter"]')) "." ancestor-context('[data-type="chapter"]', count-of-type('[data-type="page"]:not(:has(cnx-pi[data-type="cnx.flag.introduction"]))')) " "; }

body:has([data-type="chapter"]:has(section.glossary [data-type="exercise"] [data-type="solution"], section.summary [data-type="exercise"] [data-type="solution"], section.formula-review [data-type="exercise"] [data-type="solution"], section.practice [data-type="exercise"] [data-type="solution"], section.bring-together-exercises [data-type="exercise"] [data-type="solution"], section.free-response [data-type="exercise"] [data-type="solution"], section.bring-together-homework [data-type="exercise"] [data-type="solution"], section.references [data-type="exercise"] [data-type="solution"], section.solutions [data-type="exercise"] [data-type="solution"]))::after(1)::before {
  tag-name-set: "h1";
  content: "Answer Key"; }
body:has([data-type="chapter"]:has(section.glossary [data-type="exercise"] [data-type="solution"], section.summary [data-type="exercise"] [data-type="solution"], section.formula-review [data-type="exercise"] [data-type="solution"], section.practice [data-type="exercise"] [data-type="solution"], section.bring-together-exercises [data-type="exercise"] [data-type="solution"], section.free-response [data-type="exercise"] [data-type="solution"], section.bring-together-homework [data-type="exercise"] [data-type="solution"], section.references [data-type="exercise"] [data-type="solution"], section.solutions [data-type="exercise"] [data-type="solution"]))::after(1)::for-each-descendant(1, '[data-type="chapter"]'):has(section.glossary [data-type="exercise"] [data-type="solution"], section.summary [data-type="exercise"] [data-type="solution"], section.formula-review [data-type="exercise"] [data-type="solution"], section.practice [data-type="exercise"] [data-type="solution"], section.bring-together-exercises [data-type="exercise"] [data-type="solution"], section.free-response [data-type="exercise"] [data-type="solution"], section.bring-together-homework [data-type="exercise"] [data-type="solution"], section.references [data-type="exercise"] [data-type="solution"], section.solutions [data-type="exercise"] [data-type="solution"]) {
  /* Chapter title */ }
  body:has([data-type="chapter"]:has(section.glossary [data-type="exercise"] [data-type="solution"], section.summary [data-type="exercise"] [data-type="solution"], section.formula-review [data-type="exercise"] [data-type="solution"], section.practice [data-type="exercise"] [data-type="solution"], section.bring-together-exercises [data-type="exercise"] [data-type="solution"], section.free-response [data-type="exercise"] [data-type="solution"], section.bring-together-homework [data-type="exercise"] [data-type="solution"], section.references [data-type="exercise"] [data-type="solution"], section.solutions [data-type="exercise"] [data-type="solution"]))::after(1)::for-each-descendant(1, '[data-type="chapter"]'):has(section.glossary [data-type="exercise"] [data-type="solution"], section.summary [data-type="exercise"] [data-type="solution"], section.formula-review [data-type="exercise"] [data-type="solution"], section.practice [data-type="exercise"] [data-type="solution"], section.bring-together-exercises [data-type="exercise"] [data-type="solution"], section.free-response [data-type="exercise"] [data-type="solution"], section.bring-together-homework [data-type="exercise"] [data-type="solution"], section.references [data-type="exercise"] [data-type="solution"], section.solutions [data-type="exercise"] [data-type="solution"]):has([data-type="page"]:has(cnx-pi[data-type="cnx.flag.introduction"])) {
    /* This guard is just for the styleguide */
    /* Chapter Answers */
    content: move-here('section.glossary [data-type="exercise"] [data-type="solution"], section.summary [data-type="exercise"] [data-type="solution"], section.formula-review [data-type="exercise"] [data-type="solution"], section.practice [data-type="exercise"] [data-type="solution"], section.bring-together-exercises [data-type="exercise"] [data-type="solution"], section.free-response [data-type="exercise"] [data-type="solution"], section.bring-together-homework [data-type="exercise"] [data-type="solution"], section.references [data-type="exercise"] [data-type="solution"], section.solutions [data-type="exercise"] [data-type="solution"]'); }
    body:has([data-type="chapter"]:has(section.glossary [data-type="exercise"] [data-type="solution"], section.summary [data-type="exercise"] [data-type="solution"], section.formula-review [data-type="exercise"] [data-type="solution"], section.practice [data-type="exercise"] [data-type="solution"], section.bring-together-exercises [data-type="exercise"] [data-type="solution"], section.free-response [data-type="exercise"] [data-type="solution"], section.bring-together-homework [data-type="exercise"] [data-type="solution"], section.references [data-type="exercise"] [data-type="solution"], section.solutions [data-type="exercise"] [data-type="solution"]))::after(1)::for-each-descendant(1, '[data-type="chapter"]'):has(section.glossary [data-type="exercise"] [data-type="solution"], section.summary [data-type="exercise"] [data-type="solution"], section.formula-review [data-type="exercise"] [data-type="solution"], section.practice [data-type="exercise"] [data-type="solution"], section.bring-together-exercises [data-type="exercise"] [data-type="solution"], section.free-response [data-type="exercise"] [data-type="solution"], section.bring-together-homework [data-type="exercise"] [data-type="solution"], section.references [data-type="exercise"] [data-type="solution"], section.solutions [data-type="exercise"] [data-type="solution"]):has([data-type="page"]:has(cnx-pi[data-type="cnx.flag.introduction"]))::before {
      tag-name-set: "h2";
      content: descendant-context('> [data-type="document-title"]', text-contents()); }
      body:has([data-type="chapter"]:has(section.glossary [data-type="exercise"] [data-type="solution"], section.summary [data-type="exercise"] [data-type="solution"], section.formula-review [data-type="exercise"] [data-type="solution"], section.practice [data-type="exercise"] [data-type="solution"], section.bring-together-exercises [data-type="exercise"] [data-type="solution"], section.free-response [data-type="exercise"] [data-type="solution"], section.bring-together-homework [data-type="exercise"] [data-type="solution"], section.references [data-type="exercise"] [data-type="solution"], section.solutions [data-type="exercise"] [data-type="solution"]))::after(1)::for-each-descendant(1, '[data-type="chapter"]'):has(section.glossary [data-type="exercise"] [data-type="solution"], section.summary [data-type="exercise"] [data-type="solution"], section.formula-review [data-type="exercise"] [data-type="solution"], section.practice [data-type="exercise"] [data-type="solution"], section.bring-together-exercises [data-type="exercise"] [data-type="solution"], section.free-response [data-type="exercise"] [data-type="solution"], section.bring-together-homework [data-type="exercise"] [data-type="solution"], section.references [data-type="exercise"] [data-type="solution"], section.solutions [data-type="exercise"] [data-type="solution"]):has([data-type="page"]:has(cnx-pi[data-type="cnx.flag.introduction"]))::before::before {
        content: ancestor-context("body", count-of-type('[data-type="chapter"]')) ". ";
        tag-name-set: "a";
        attrs-add: "href" "#" descendant-context('[data-type="page"]:has(cnx-pi[data-type="cnx.flag.introduction"])', attr(id)); }

/* Discard all processing instructions */
[data-type="page"] cnx-pi {
  display: none; }

/*# sourceMappingURL=statistics.css.map */
