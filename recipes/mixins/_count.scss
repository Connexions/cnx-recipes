/// Base counting mixin - creates a counter with the given name, increment location, and reset location
/// @arg {Text} $name - The unquoted name of the counter that will be created
/// @arg {String} $selector - A string of the selector at which the counter will increment
/// @arg {String} $resetSelector - A string of the selector at which the counter will reset
/// @group count
@function _count($selector, $resetSelector) {
  //Improvement: Resetting isn't dry, recreates selector if more than one counter resets on one element

  @return ancestor-context($resetSelector, count-of-type($selector));
}


//TODO: call arguments explicity? Is this possible? Ex:
// @function count_countChapter($name: null) {
//   @return _count(
//     $name: $name,
//     $selector: 'div[data-type="chapter"]',
//     $resetSelector: 'body'
//   );
// }

/// A basic mixin for counting chapters using css counters
/// @arg {Text} $name - Name of the css counter that will control chapter numbering
/// @group count
@function count_countChapters($name: null) {
  @return _count(
    'div[data-type="chapter"]',
    'body'
  );
}

/// A basic mixin for counting appendices using css counters
/// @arg {Text} $name - Name of the css counter that will control appendix numbering`
/// @group count
@function count_countAppendices($name: null) {
  @return _count(
    'div.appendix',
    'body'
  );
}

/// A basic mixin for counting sections within a chapter using css counters.
/// Does not count the introduction module.
/// @arg {Text} $name - Name of the css counter that will control section numbering
/// @group count
@function count_countSections($name: null) {
  @return _count(
    'div[data-type="chapter"] > div[data-type="page"]:not(.introduction)',
    '[data-type="chapter"], .appendix'
  );
}

/// A basic mixin for counting end of chapter(EOC) exercises using css counters.
/// Resets at the chapter level.
/// @arg {Text} $name - Name of the css counter that will control exercise numbering
/// @group count

@function count_countEOCExercises($name, $resetSelector) {
  @return _count(
    '.os-eoc [data-type="exercise"]',
    '#{$resetSelector}, .appendix'
  );
}

/// A basic mixin for counting all exercises within `.os-eoc` using css counters.
/// Resets at the body.
/// TODO Rename me to `count_countEOCExercisesWithoutReset` or something
/// @arg {Text} $name - Name of the css counter that will control all exercise numbering
/// @group count
@function count_countExercises($name: null) {
  @return _count(
    '.os-eoc [data-type="exercise"]',
    'body'
  );
}

/// A basic mixin for counting all exercises within `.os-eoc` using css counters.
/// Resets at the body.
/// TODO Rename me to `count_countEOCExercisesWithoutReset` or something
/// @arg {Text} $name - Name of the css counter that will control all exercise numbering
/// @group count
@function count_countExercisesInContentButNotInExample($name: null) {
  @return _count(
    ':not([data-type="example"]) > [data-type="exercise"]:not(.unnumbered)',
    '[data-type="chapter"], .appendix'
  );
}

/// A basic mixin for counting examples within a chapter using css counters
/// @arg {Text} $name - Name of the css counter that will control example numbering
/// @group count
@function count_countExamples($name: null) {
  @return _count(
    'div[data-type="chapter"] [data-type="example"]',
    '[data-type="chapter"], .appendix'
  );
}

/// A basic mixin for counting `span[data-type="term"]` using css counters
/// @arg {Text} $name - Name of the css counter that will control term numbering
/// @group count
@function count_countTerms($name: null) {
  @return _count(
    'div[data-type="page"] span[data-type="term"], div[data-type="composite-page"] span[data-type="term"]',
    'body'
  );
}

/// A basic mixin for counting tables using css counters
/// @arg {Text} $name - Name of the css counter that will control table numbering
/// @group count
@function count_countTables($name: null) {
  @return _count(
    ':not(table) > table:not(.unnumbered)',
    '[data-type="chapter"], .appendix'
  );
}

/// A basic mixin for counting figures using css counters
/// @arg {Text} $name - Name of the css counter that will control figure numbering
/// @group count
@function count_countFigures($name: null) {
  @return _count(
    ':not(figure) > figure:not(.unnumbered)',
    '[data-type="chapter"], .appendix'
  );
}

/// A basic mixin for counting notes using css counters
/// @arg {Text} $name - Name of the css counter that will control note numbering
/// @arg {String} $type - A string of the selector of the note type you want to count
/// @group count
@function count_countNote($name, $type) {
  @return _count(
    '[data-type="note"].#{$type}',
    '[data-type="chapter"], .appendix'
  );
}

/// A basic mixin for counting equations using css counters
/// @arg {Text} $name - Name of the css counter that will control equation numbering
/// @group count
@function count_countEquations($name: null) {
  @return _count(
    '[data-type="equation"]:not(.unnumbered)',
    '[data-type="chapter"], .appendix'
  );
}

/// A basic mixin for counting footnotes using css counters
/// @arg {Text} $name - Name of the css counter that will control footnote numbering
/// @group count
@function count_footnotes($name: null) {
  @return _count(
    '[data-type="footnote-ref"]',
    '[data-type="chapter"], .appendix'
  )
}

/// A basic mixin for counting footnote links in text using css counters
/// @arg {Text} $name - Name of the css counter that will control footnote link numbering
/// @group count
@function count_footnoteLinks($name: null) {
  @return _count(
    '[data-type="footnote-number"]',
    '[data-type="chapter"], .appendix'
  )
}
